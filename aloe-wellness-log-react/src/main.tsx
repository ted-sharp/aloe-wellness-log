import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App.tsx';
import './index.css';
import { initializePrivacySettings } from './utils/privacy';

// PWAÂûãÂÆöÁæ©
declare global {
  interface BeforeInstallPromptEvent extends Event {
    readonly platforms: string[];
    readonly userChoice: Promise<{
      outcome: 'accepted' | 'dismissed';
      platform: string;
    }>;
    prompt(): Promise<void>;
  }

  interface Window {
    showInstallPrompt: () => Promise<void>;
  }
}

// üîê „Éó„É©„Ç§„Éê„Ç∑„Éº„Éª„Çª„Ç≠„É•„É™„ÉÜ„Ç£Ê©üËÉΩ„ÇíÂàùÊúüÂåñ
initializePrivacySettings();

// Service WorkerÁôªÈå≤ÔºàÊú¨Áï™Áí∞Â¢É„ÅÆ„ÅøÔºâ
if ('serviceWorker' in navigator && import.meta.env.PROD) {
  window.addEventListener('load', () => {
    navigator.serviceWorker
      .register('/sw.js')
      .then(registration => {
        console.log('üåø SW registered:', registration);

        // „Çª„Ç≠„É•„É™„ÉÜ„Ç£Âº∑ÂåñÔºöÂÆöÊúüÁöÑ„Å™Service WorkerÊõ¥Êñ∞„ÉÅ„Çß„ÉÉ„ÇØ
        setInterval(() => {
          registration.update();
        }, 60000); // 1ÂàÜ„Åî„Å®
      })
      .catch(error => {
        console.error('üî• SW registration failed:', error);
      });
  });
}

// PWA „Ç§„É≥„Çπ„Éà„Éº„É´„Éó„É≠„É≥„Éó„Éà
let deferredPrompt: BeforeInstallPromptEvent | null = null;

window.addEventListener('beforeinstallprompt', (e: Event) => {
  // „Éá„Éï„Ç©„É´„Éà„ÅÆ„Éü„ÉãÊÉÖÂ†±„Éê„Éº„ÇíË°®Á§∫„Åï„Åõ„Å™„ÅÑ
  e.preventDefault();

  // Âæå„Åß‰ΩøÁî®„Åô„Çã„Åü„ÇÅ„Å´„Ç§„Éô„É≥„Éà„Çí‰øùÂ≠ò
  deferredPrompt = e as BeforeInstallPromptEvent;

  console.log('üéØ PWA install prompt ready');
});

// „Ç¢„Éó„É™„Åå„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„ÅüÈöõ„ÅÆÂá¶ÁêÜ
window.addEventListener('appinstalled', () => {
  console.log('üéâ PWA was installed successfully');
  deferredPrompt = null;
});

// PWA„Ç§„É≥„Çπ„Éà„Éº„É´Èñ¢Êï∞„Çí„Ç∞„É≠„Éº„Éê„É´„Å´ÂÖ¨Èñã

window.showInstallPrompt = async () => {
  if (deferredPrompt) {
    // „Ç§„É≥„Çπ„Éà„Éº„É´„Éó„É≠„É≥„Éó„Éà„ÇíË°®Á§∫
    deferredPrompt.prompt();

    // „É¶„Éº„Ç∂„Éº„ÅÆÈÅ∏Êäû„ÇíÂæÖ„Å§
    const { outcome } = await deferredPrompt.userChoice;
    console.log(`üéØ PWA install outcome: ${outcome}`);

    // „Éó„É≠„É≥„Éó„Éà„ÅØ‰∏ÄÂ∫¶„Åó„Åã‰ΩøÁî®„Åß„Åç„Å™„ÅÑ
    deferredPrompt = null;
  } else {
    console.log('‚ùå Install prompt not available');
  }
};

// „Çª„Ç≠„É•„É™„ÉÜ„Ç£Âº∑ÂåñÔºö„Ç≥„É≥„ÉÜ„É≥„ÉÑ‰øùË≠∑
document.addEventListener('contextmenu', _e => {
  // Êú¨Áï™Áí∞Â¢É„Åß„ÅØÂè≥„ÇØ„É™„ÉÉ„ÇØ„É°„Éã„É•„Éº„ÇíÁÑ°ÂäπÂåñÔºàÂøÖË¶Å„Å´Âøú„Åò„Å¶Ôºâ
  if (import.meta.env.PROD) {
    // _e.preventDefault();
  }
});

// „Çª„Ç≠„É•„É™„ÉÜ„Ç£Âº∑ÂåñÔºöÈñãÁô∫ËÄÖ„ÉÑ„Éº„É´Ê§úÂá∫ÔºàÂü∫Êú¨ÁöÑ„Å™ÂØæÁ≠ñÔºâ
const devtools = {
  open: false,
  orientation: null as string | null,
};

const threshold = 160;

// ÁîªÈù¢„Çµ„Ç§„Ç∫„ÅÆÂ§âÂåñ„ÇíÁõ£Ë¶ñ
function detectDevTools() {
  if (
    window.outerHeight - window.innerHeight > threshold ||
    window.outerWidth - window.innerWidth > threshold
  ) {
    if (!devtools.open) {
      devtools.open = true;
      console.warn('üîí Developer tools detected');
    }
  } else {
    devtools.open = false;
  }
}

// Êú¨Áï™Áí∞Â¢É„Åß„ÅÆ„ÅøÈñãÁô∫ËÄÖ„ÉÑ„Éº„É´Ê§úÂá∫„ÇíÊúâÂäπÂåñ
if (import.meta.env.PROD) {
  setInterval(detectDevTools, 500);
}

// „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞Âº∑Âåñ
window.addEventListener('error', event => {
  console.error('üî• Global error:', event.error);

  // „Çª„Ç≠„É•„É™„ÉÜ„Ç£Èñ¢ÈÄ£„ÅÆ„Ç®„É©„Éº„ÇíÁâπÂà•„Å´Âá¶ÁêÜ
  if (event.error?.name === 'SecurityError') {
    console.error(
      'üîí Security error detected, additional logging may be required'
    );
  }
});

window.addEventListener('unhandledrejection', event => {
  console.error('üî• Unhandled promise rejection:', event.reason);

  // „Éó„É©„Ç§„Éê„Ç∑„ÉºÈÖçÊÖÆ„Åß„Ç®„É©„ÉºË©≥Á¥∞„Çí„Éû„Çπ„ÇØ
  if (typeof event.reason === 'object' && event.reason !== null) {
    const sanitizedReason = { ...event.reason };
    // Ê©üÂØÜÊÉÖÂ†±„ÅåÂê´„Åæ„Çå„ÇãÂèØËÉΩÊÄß„ÅÆ„ÅÇ„Çã„Éó„É≠„Éë„ÉÜ„Ç£„ÇíÂâäÈô§
    delete sanitizedReason.stack;
    delete sanitizedReason.message;
    console.error('üîí Sanitized error:', sanitizedReason);
  }
});

// „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁõ£Ë¶ñ
if ('performance' in window && 'getEntriesByType' in window.performance) {
  window.addEventListener('load', () => {
    // „Éö„Éº„Ç∏„É≠„Éº„ÉâÊôÇÈñì„ÇíË®àÊ∏¨
    const perfData = performance.getEntriesByType(
      'navigation'
    )[0] as PerformanceNavigationTiming;
    if (perfData) {
      const loadTime = perfData.loadEventEnd - perfData.loadEventStart;
      console.log(`‚ö° Page load time: ${loadTime}ms`);

      // „Çª„Ç≠„É•„É™„ÉÜ„Ç£Áõ£Ë¶ñÔºöÁï∞Â∏∏„Å´Èï∑„ÅÑ„É≠„Éº„ÉâÊôÇÈñì„ÅÆÊ§úÂá∫
      if (loadTime > 10000) {
        // 10Áßí‰ª•‰∏ä
        console.warn(
          '‚ö†Ô∏è Unusually long load time detected, potential security issue'
        );
      }
    }
  });
}

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
