{"version":3,"file":"textUtils-BtQSYqdL.js","sources":["../../aloe-wellness-log-react/src/utils/textUtils.ts"],"sourcesContent":["/**\n * テキスト処理ユーティリティ関数集\n *\n * 重複していた文字列処理関数を統一管理\n */\n\n/**\n * テキストを指定された長さで切り詰める\n * @param text 対象のテキスト\n * @param maxLength 最大文字数（デフォルト: 30）\n * @returns 切り詰められたテキスト（必要に応じて省略記号付き）\n */\nexport function truncateText(text: string, maxLength: number = 30): string {\n  if (text.length <= maxLength) {\n    return text;\n  }\n  return text.substring(0, maxLength) + '...';\n}\n\n/**\n * テキストが切り詰められるかどうかを判定\n * @param text 対象のテキスト\n * @param maxLength 最大文字数\n * @returns 切り詰めが必要かどうか\n */\nexport function needsTruncation(text: string, maxLength: number = 30): boolean {\n  return text.length > maxLength;\n}\n\n/**\n * 安全な文字列変換（null/undefinedを空文字に変換）\n * @param value 変換対象の値\n * @returns 安全な文字列\n */\nexport function safeString(value: unknown): string {\n  if (value === null || value === undefined) {\n    return '';\n  }\n  return String(value);\n}\n\n/**\n * 文字列の最初の文字を大文字にする\n * @param text 対象のテキスト\n * @returns 最初が大文字の文字列\n */\nexport function capitalize(text: string): string {\n  if (!text) return text;\n  return text.charAt(0).toUpperCase() + text.slice(1);\n}\n\n/**\n * 複数行テキストの行数を制限\n * @param text 対象のテキスト\n * @param maxLines 最大行数（デフォルト: 3）\n * @returns 行数制限されたテキスト\n */\nexport function limitLines(text: string, maxLines: number = 3): string {\n  const lines = text.split('\\n');\n  if (lines.length <= maxLines) {\n    return text;\n  }\n  return lines.slice(0, maxLines).join('\\n') + '\\n...';\n}\n"],"names":["truncateText","text","maxLength","length","substring"],"mappings":"AAYO,SAASA,EAAaC,EAAcC,EAAoB,IAC7D,OAAID,EAAKE,QAAUD,EACVD,EAEFA,EAAKG,UAAU,EAAGF,GAAa,KACxC"}