{"version":3,"file":"RecordGraph-BsRXChst.js","sources":["../../aloe-wellness-log-react/src/pages/RecordGraph.tsx"],"sourcesContent":["import { useEffect, useMemo, useState } from 'react';\nimport {\n  CartesianGrid,\n  Legend,\n  Line,\n  LineChart,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport { useI18n } from '../hooks/useI18n';\nimport { useRecordsStore } from '../store/records';\nimport { isDev } from '../utils/devTools';\nimport {\n  performanceMonitor,\n  trackDatabaseOperation,\n} from '../utils/performanceMonitor';\n\nexport default function RecordGraph() {\n  const { t } = useI18n();\n  const { records, fields, loadRecords, loadFields } = useRecordsStore();\n\n  // パフォーマンス監視の初期化\n  useEffect(() => {\n    performanceMonitor.trackRender.start('RecordGraph');\n    return () => {\n      performanceMonitor.trackRender.end('RecordGraph');\n    };\n  });\n\n  // データ読み込み（パフォーマンス監視付き）\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        await trackDatabaseOperation('load-fields-graph', async () => {\n          await loadFields();\n        });\n\n        await trackDatabaseOperation('load-records-graph', async () => {\n          await loadRecords();\n        });\n      } catch (error) {\n        console.error('Data loading error:', error);\n      }\n    };\n\n    loadData();\n  }, [loadFields, loadRecords]);\n\n  // 期間選択オプション\n  const PERIOD_OPTIONS = [\n    { label: t('pages.graph.periods.week'), value: 7 },\n    { label: t('pages.graph.periods.month'), value: 30 },\n    { label: t('pages.graph.periods.all'), value: 0 },\n  ];\n\n  // 数値・文字列型のフィールドをorder順でソート\n  const numberFields = fields\n    .filter(f => f.type === 'number' || f.type === 'string')\n    .sort((a, b) => (a.order || 999) - (b.order || 999));\n  const [selectedFieldId, setSelectedFieldId] = useState(\n    numberFields.length > 0 ? numberFields[0].fieldId : ''\n  );\n  const [period, setPeriod] = useState(7); // デフォルト1週間\n\n  // 選択中の項目のデータのみ抽出（パフォーマンス監視付き）\n  const filteredData = useMemo(() => {\n    const startTime = performance.now();\n\n    if (!selectedFieldId) return [];\n    let data = records\n      .filter(r => r.fieldId === selectedFieldId)\n      .map(r => ({ ...r, date: r.date || r.datetime?.slice(0, 10) }))\n      .sort((a, b) => a.date.localeCompare(b.date));\n    if (period > 0) {\n      const cutoff = new Date();\n      cutoff.setDate(cutoff.getDate() - period + 1);\n      data = data.filter(r => new Date(r.date) >= cutoff);\n    }\n\n    const duration = performance.now() - startTime;\n    if (isDev && duration > 10) {\n      console.warn(\n        `🐌 Slow graph data filtering: ${duration.toFixed(2)}ms for ${\n          records.length\n        } records`\n      );\n    }\n\n    return data;\n  }, [records, selectedFieldId, period]);\n\n  // フィールド選択のハンドラー（パフォーマンス監視付き）\n  const handleFieldChange = (fieldId: string) => {\n    const interactionId =\n      performanceMonitor.trackInteraction.start('field-select');\n    setSelectedFieldId(fieldId);\n    performanceMonitor.trackInteraction.end(interactionId, 'field-select');\n  };\n\n  // 期間選択のハンドラー（パフォーマンス監視付き）\n  const handlePeriodChange = (newPeriod: number) => {\n    const interactionId =\n      performanceMonitor.trackInteraction.start('period-select');\n    setPeriod(newPeriod);\n    performanceMonitor.trackInteraction.end(interactionId, 'period-select');\n  };\n\n  // 開発環境でのパフォーマンス情報表示\n  useEffect(() => {\n    if (!isDev) return;\n\n    const logPerformanceInfo = () => {\n      console.group('🔍 RecordGraph Performance Info');\n      console.log(`📊 Total Records: ${records.length}`);\n      console.log(`📊 Total Fields: ${fields.length}`);\n      console.log(`📊 Number Fields: ${numberFields.length}`);\n      console.log(`📊 Filtered Data Points: ${filteredData.length}`);\n      console.log(`📊 Selected Field: ${selectedFieldId}`);\n      console.log(`📊 Period: ${period} days`);\n      console.groupEnd();\n    };\n\n    const timeout = setTimeout(logPerformanceInfo, 2000);\n    return () => clearTimeout(timeout);\n  }, [\n    records.length,\n    fields.length,\n    numberFields.length,\n    filteredData.length,\n    selectedFieldId,\n    period,\n  ]);\n\n  return (\n    <div className=\"p-2 sm:p-4 max-w-full sm:max-w-2xl mx-auto bg-gray-50 dark:bg-gray-900 min-h-screen px-2 sm:px-0\">\n      <h1 className=\"text-3xl font-bold text-gray-800 dark:text-white mb-12\">\n        {t('pages.graph.title')}\n      </h1>\n      <div className=\"flex gap-4 mb-4 items-center\">\n        <label className=\"text-gray-700 dark:text-gray-300\">\n          {t('pages.graph.field')}\n          <select\n            value={selectedFieldId}\n            onChange={e => handleFieldChange(e.target.value)}\n            className=\"border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded px-2 py-1 ml-2 focus:outline-none focus:ring-2 focus:ring-blue-600 dark:focus:ring-blue-400\"\n          >\n            {numberFields.map(f => (\n              <option key={f.fieldId} value={f.fieldId}>\n                {f.name}\n              </option>\n            ))}\n          </select>\n        </label>\n        <label className=\"text-gray-700 dark:text-gray-300\">\n          {t('pages.graph.period')}\n          <select\n            value={period}\n            onChange={e => handlePeriodChange(Number(e.target.value))}\n            className=\"border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded px-2 py-1 ml-2 focus:outline-none focus:ring-2 focus:ring-blue-600 dark:focus:ring-blue-400\"\n          >\n            {PERIOD_OPTIONS.map(opt => (\n              <option key={opt.value} value={opt.value}>\n                {opt.label}\n              </option>\n            ))}\n          </select>\n        </label>\n      </div>\n      <div className=\"bg-white dark:bg-gray-800 rounded shadow p-4\">\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <LineChart\n            data={filteredData}\n            margin={{ top: 20, right: 30, left: 0, bottom: 0 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"date\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Line\n              type=\"monotone\"\n              dataKey=\"value\"\n              stroke=\"#8884d8\"\n              name={numberFields.find(f => f.fieldId === selectedFieldId)?.name}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n}\n"],"names":["RecordGraph","t","useI18n","records","fields","loadRecords","loadFields","useRecordsStore","useEffect","performanceMonitor","trackRender","start","end","async","trackDatabaseOperation","error","console","loadData","PERIOD_OPTIONS","label","value","numberFields","filter","f","type","sort","a","b","order","selectedFieldId","setSelectedFieldId","useState","length","fieldId","period","setPeriod","filteredData","useMemo","performance","now","data","r","map","date","_a","datetime","slice","localeCompare","cutoff","Date","setDate","getDate","jsxs","className","children","jsx","onChange","e","interactionId","trackInteraction","handleFieldChange","target","name","newPeriod","handlePeriodChange","Number","opt","ResponsiveContainer","width","height","LineChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Line","stroke","find"],"mappings":"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"}