{"version":3,"file":"RecordInput-BuK_xXQU.js","sources":["../../aloe-wellness-log-react/src/components/DateTimeSelector.tsx","../../aloe-wellness-log-react/src/components/NotesInput.tsx","../../aloe-wellness-log-react/src/components/SortModal.tsx","../../aloe-wellness-log-react/src/utils/errorHandler.ts","../../aloe-wellness-log-react/src/hooks/useErrorHandler.ts","../../aloe-wellness-log-react/src/pages/RecordInput.tsx","../../aloe-wellness-log-react/src/hooks/useFieldManagement.ts"],"sourcesContent":["import React, { memo } from 'react';\nimport { HiCalendarDays, HiClock } from 'react-icons/hi2';\nimport { useI18n } from '../hooks/useI18n';\n\ninterface DateTimeSelectorProps {\n  recordDate: string;\n  recordTime: string;\n  onDateChange: (date: string) => void;\n  onTimeChange: (time: string) => void;\n  onSetCurrentDateTime: () => void;\n}\n\n// メモ化されたDateTimeSelectorコンポーネント\nconst DateTimeSelector: React.FC<DateTimeSelectorProps> = memo(\n  ({\n    recordDate,\n    recordTime,\n    onDateChange,\n    onTimeChange,\n    onSetCurrentDateTime,\n  }) => {\n    const { t } = useI18n();\n\n    return (\n      <div className=\"bg-white dark:bg-gray-800 p-6 rounded-2xl shadow-md\">\n        <fieldset className=\"space-y-4\">\n          <legend className=\"text-2xl font-semibold text-gray-800 dark:text-white flex items-center gap-2\">\n            <HiCalendarDays\n              className=\"w-6 h-6 text-blue-600 dark:text-blue-400\"\n              aria-hidden=\"true\"\n            />\n            {t('pages.input.recordDateTime')}\n          </legend>\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <label\n                htmlFor=\"record-date\"\n                className=\"block text-base font-medium text-gray-700 dark:text-gray-200 mb-2\"\n              >\n                {t('pages.input.date')}\n              </label>\n              <input\n                id=\"record-date\"\n                type=\"date\"\n                value={recordDate}\n                onChange={e => onDateChange(e.target.value)}\n                className=\"w-full border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-white rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 dark:focus:ring-blue-400 dark:focus:border-blue-400\"\n                aria-describedby=\"record-date-desc\"\n                required\n                aria-required=\"true\"\n              />\n              <div id=\"record-date-desc\" className=\"sr-only\">\n                {t('pages.input.dateDescription')}\n              </div>\n            </div>\n            <div className=\"flex-1\">\n              <label\n                htmlFor=\"record-time\"\n                className=\"block text-base font-medium text-gray-700 dark:text-gray-200 mb-2\"\n              >\n                {t('pages.input.time')}\n              </label>\n              <input\n                id=\"record-time\"\n                type=\"time\"\n                value={recordTime}\n                onChange={e => onTimeChange(e.target.value)}\n                className=\"w-full border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-white rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 dark:focus:ring-blue-400 dark:focus:border-blue-400\"\n                aria-describedby=\"record-time-desc\"\n                required\n                aria-required=\"true\"\n              />\n              <div id=\"record-time-desc\" className=\"sr-only\">\n                {t('pages.input.timeDescription')}\n              </div>\n            </div>\n            <div className=\"flex items-end\">\n              <button\n                type=\"button\"\n                onClick={onSetCurrentDateTime}\n                className=\"bg-blue-500 dark:bg-blue-600 text-white px-4 py-2 rounded-lg shadow-md hover:bg-blue-600 dark:hover:bg-blue-700 transition-colors duration-200 font-medium flex items-center gap-2 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n                aria-label={t('pages.input.setCurrentDateTime')}\n                aria-describedby=\"current-time-desc\"\n              >\n                <HiClock className=\"w-5 h-5\" aria-hidden=\"true\" />\n                {t('pages.input.setCurrentDateTime')}\n              </button>\n              <div id=\"current-time-desc\" className=\"sr-only\">\n                {t('pages.input.currentTimeDescription')}\n              </div>\n            </div>\n          </div>\n        </fieldset>\n      </div>\n    );\n  }\n);\n\nDateTimeSelector.displayName = 'DateTimeSelector';\n\nexport default DateTimeSelector;\n","import React, { memo, useCallback } from 'react';\nimport { HiDocumentText } from 'react-icons/hi2';\nimport { useI18n } from '../hooks/useI18n';\n\ninterface NotesInputProps {\n  value: string;\n  onChange: (value: string) => void;\n  maxLength?: number;\n  placeholder?: string;\n}\n\n// メモ化されたNotesInputコンポーネント\nconst NotesInput: React.FC<NotesInputProps> = memo(\n  ({ value, onChange, maxLength = 500, placeholder }) => {\n    const { t } = useI18n();\n\n    // 入力ハンドラーをメモ化\n    const handleChange = useCallback(\n      (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        onChange(e.target.value);\n      },\n      [onChange]\n    );\n\n    // 文字数計算をメモ化\n    const charCount = value.length;\n    const remaining = maxLength - charCount;\n    const isNearLimit = charCount > maxLength * 0.8; // 80%を超えた場合\n\n    // プレースホルダーのデフォルト値を翻訳\n    const effectivePlaceholder =\n      placeholder || t('pages.input.notesPlaceholder');\n\n    return (\n      <div className=\"bg-white dark:bg-gray-800 p-6 rounded-2xl shadow-md\">\n        <div className=\"space-y-4\">\n          <label\n            htmlFor=\"notes-input\"\n            className=\"text-2xl font-semibold text-gray-800 dark:text-white flex items-center gap-2\"\n          >\n            <HiDocumentText\n              className=\"w-6 h-6 text-blue-600 dark:text-blue-400\"\n              aria-hidden=\"true\"\n            />\n            {t('pages.input.notes')}\n          </label>\n          <div>\n            <textarea\n              id=\"notes-input\"\n              value={value}\n              onChange={handleChange}\n              placeholder={effectivePlaceholder}\n              className=\"w-full border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-white rounded-lg px-4 py-2 h-24 focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 dark:focus:ring-blue-400 dark:focus:border-blue-400 resize-none placeholder:text-gray-500 dark:placeholder:text-gray-400\"\n              maxLength={maxLength}\n              aria-describedby=\"notes-char-count notes-description\"\n              aria-label={t('pages.input.notesPlaceholder')}\n            />\n            <div id=\"notes-description\" className=\"sr-only\">\n              {t('pages.input.notesDescription', { maxLength })}\n            </div>\n            <div\n              id=\"notes-char-count\"\n              className={`text-right text-sm mt-2 ${\n                isNearLimit\n                  ? 'text-orange-600 dark:text-orange-400 font-medium'\n                  : 'text-gray-600 dark:text-gray-400'\n              }`}\n              aria-live=\"polite\"\n              aria-label={t('aria.charactersEntered', {\n                count: charCount,\n                remaining,\n              })}\n            >\n              {t('pages.input.characterCount', {\n                count: charCount,\n                max: maxLength,\n              })}\n              {isNearLimit && (\n                <span className=\"ml-2 text-orange-600 dark:text-orange-400\">\n                  (残り{remaining}文字)\n                </span>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n\nNotesInput.displayName = 'NotesInput';\n\nexport default NotesInput;\n","import type { DragEndEvent } from '@dnd-kit/core';\nimport {\n  DndContext,\n  KeyboardSensor,\n  PointerSensor,\n  closestCenter,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core';\nimport {\n  SortableContext,\n  sortableKeyboardCoordinates,\n  useSortable,\n  verticalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport React, { useCallback, useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport {\n  HiArrowsUpDown,\n  HiBars3,\n  HiCheckCircle,\n  HiXMark,\n} from 'react-icons/hi2';\nimport {\n  useKeyboardNavigation,\n  useLiveRegion,\n  useModalAccessibility,\n} from '../hooks/useAccessibility';\nimport { useI18n } from '../hooks/useI18n';\nimport type { Field } from '../types/record';\n\n// ソート可能なアイテムコンポーネント\nfunction SortableItem({\n  field,\n  onToggleDisplay,\n}: {\n  field: Field;\n  onToggleDisplay: (fieldId: string) => void;\n}) {\n  const { t } = useI18n();\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({ id: field.fieldId });\n\n  const { announcePolite } = useLiveRegion();\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.5 : 1,\n  };\n\n  // 表示状態をトグルする関数\n  const handleToggleDisplay = useCallback(\n    (e: React.MouseEvent) => {\n      e.stopPropagation(); // ドラッグイベントとの競合を防ぐ\n      e.preventDefault(); // デフォルトの動作も防ぐ\n      const newState = !field.defaultDisplay;\n      onToggleDisplay(field.fieldId);\n\n      // スクリーンリーダー用アナウンス\n      announcePolite(\n        `${field.name}${t('dialogs.sortModal.toggledAnnouncement', {\n          state: newState\n            ? t('dialogs.sortModal.visible')\n            : t('dialogs.sortModal.hidden'),\n        })}`\n      );\n    },\n    [\n      field.fieldId,\n      field.defaultDisplay,\n      field.name,\n      onToggleDisplay,\n      announcePolite,\n      t,\n    ]\n  );\n\n  // キーボードナビゲーション用のハンドラー\n  const handleKeyboardToggle = useCallback(() => {\n    const newState = !field.defaultDisplay;\n    onToggleDisplay(field.fieldId);\n\n    // スクリーンリーダー用アナウンス\n    announcePolite(\n      `${field.name}${t('dialogs.sortModal.toggledAnnouncement', {\n        state: newState\n          ? t('dialogs.sortModal.visible')\n          : t('dialogs.sortModal.hidden'),\n      })}`\n    );\n  }, [\n    field.fieldId,\n    field.defaultDisplay,\n    field.name,\n    onToggleDisplay,\n    announcePolite,\n    t,\n  ]);\n\n  const keyboardHandlers = {\n    onEnter: handleKeyboardToggle,\n    onSpace: handleKeyboardToggle,\n  };\n\n  const { handleKeyDown } = useKeyboardNavigation(keyboardHandlers);\n\n  // 表示状態の説明文\n  const displayStateDescription = field.defaultDisplay\n    ? t('dialogs.sortModal.visibleDescription')\n    : t('dialogs.sortModal.hiddenDescription');\n\n  return (\n    <div\n      ref={setNodeRef}\n      style={style}\n      className=\"bg-white dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-lg p-2 sm:p-3 hover:shadow-md transition-all duration-200 hover:border-purple-300 dark:hover:border-purple-400\"\n      {...attributes}\n      role=\"listitem\"\n      aria-label={`${field.name}${t(\n        'common.item'\n      )} - ${displayStateDescription} ${t('accessibility.sortable')}`}\n    >\n      <div\n        className=\"flex flex-col sm:grid sm:gap-3 sm:items-center gap-2\"\n        style={{ gridTemplateColumns: 'auto 1fr 1fr auto' }}\n      >\n        {/* スマホ用：項目名と単位を上部に */}\n        <div className=\"flex justify-between items-center sm:hidden\">\n          <div className=\"text-lg font-medium text-gray-700 dark:text-gray-200\">\n            {field.name}\n          </div>\n          <div\n            className=\"text-sm text-gray-600 dark:text-gray-400\"\n            aria-label={`${t('dialogs.sortModal.unit')}: ${\n              field.unit || t('dialogs.sortModal.noUnit')\n            }`}\n          >\n            {field.unit ? `(${field.unit})` : '―'}\n          </div>\n        </div>\n\n        {/* スマホ用：表示状態とドラッグハンドルを下部に */}\n        <div className=\"flex justify-between items-center sm:hidden\">\n          <div>\n            {field.defaultDisplay ? (\n              <button\n                onClick={handleToggleDisplay}\n                onKeyDown={handleKeyDown}\n                className=\"bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-300 px-2 py-1 rounded-full text-xs font-medium cursor-pointer hover:bg-green-200 dark:hover:bg-green-900/50 focus:outline-none focus:ring-2 focus:ring-green-500 dark:focus:ring-green-400 focus:ring-offset-1 transition-colors duration-150\"\n                aria-label={`${field.name}${t('dialogs.sortModal.makeHidden')}`}\n                aria-pressed=\"true\"\n              >\n                {t('dialogs.sortModal.visible')}\n              </button>\n            ) : (\n              <button\n                onClick={handleToggleDisplay}\n                onKeyDown={handleKeyDown}\n                className=\"bg-gray-100 dark:bg-gray-600 text-gray-600 dark:text-gray-300 px-2 py-1 rounded-full text-xs font-medium cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-500 focus:outline-none focus:ring-2 focus:ring-gray-500 dark:focus:ring-gray-400 focus:ring-offset-1 transition-colors duration-150\"\n                aria-label={`${field.name}${t(\n                  'dialogs.sortModal.makeVisible'\n                )}`}\n                aria-pressed=\"false\"\n              >\n                {t('dialogs.sortModal.hidden')}\n              </button>\n            )}\n          </div>\n          <div\n            className=\"flex justify-center cursor-move focus:outline-none focus:ring-2 focus:ring-purple-500 dark:focus:ring-purple-400 focus:ring-offset-1 rounded p-1\"\n            tabIndex={0}\n            role=\"button\"\n            aria-label={`${field.name}${t('dialogs.sortModal.dragToSort')}`}\n            {...listeners}\n          >\n            <HiArrowsUpDown\n              className=\"w-5 h-5 text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-300 transition-colors duration-150\"\n              aria-hidden=\"true\"\n            />\n          </div>\n        </div>\n\n        {/* デスクトップ用：横並びレイアウト（元の形式） */}\n        <div className=\"hidden sm:contents\">\n          {/* 左端：表示/非表示状態（クリック可能） */}\n          <div className=\"text-center border-r border-gray-200 dark:border-gray-600 pr-3\">\n            {field.defaultDisplay ? (\n              <button\n                onClick={handleToggleDisplay}\n                onKeyDown={handleKeyDown}\n                className=\"bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-300 px-2 py-1 rounded-full text-xs font-medium cursor-pointer hover:bg-green-200 dark:hover:bg-green-900/50 focus:outline-none focus:ring-2 focus:ring-green-500 dark:focus:ring-green-400 focus:ring-offset-1 transition-colors duration-150\"\n                aria-label={`${field.name}${t('dialogs.sortModal.makeHidden')}`}\n                aria-pressed=\"true\"\n              >\n                {t('dialogs.sortModal.visible')}\n              </button>\n            ) : (\n              <button\n                onClick={handleToggleDisplay}\n                onKeyDown={handleKeyDown}\n                className=\"bg-gray-100 dark:bg-gray-600 text-gray-600 dark:text-gray-300 px-2 py-1 rounded-full text-xs font-medium cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-500 focus:outline-none focus:ring-2 focus:ring-gray-500 dark:focus:ring-gray-400 focus:ring-offset-1 transition-colors duration-150\"\n                aria-label={`${field.name}${t(\n                  'dialogs.sortModal.makeVisible'\n                )}`}\n                aria-pressed=\"false\"\n              >\n                {t('dialogs.sortModal.hidden')}\n              </button>\n            )}\n          </div>\n\n          {/* 項目名 */}\n          <div className=\"text-lg font-medium text-gray-700 dark:text-gray-200 border-r border-gray-200 dark:border-gray-600 pr-3 text-right\">\n            {field.name}\n          </div>\n\n          {/* 単位 */}\n          <div\n            className=\"text-gray-600 dark:text-gray-400 border-r border-gray-200 dark:border-gray-600 pr-3 text-left\"\n            aria-label={`${t('dialogs.sortModal.unit')}: ${\n              field.unit || t('dialogs.sortModal.noUnit')\n            }`}\n          >\n            {field.unit ? `(${field.unit})` : '―'}\n          </div>\n\n          {/* 右端：上下アイコン（ドラッグハンドル） */}\n          <div\n            className=\"flex justify-center cursor-move focus:outline-none focus:ring-2 focus:ring-purple-500 dark:focus:ring-purple-400 focus:ring-offset-1 rounded p-1\"\n            tabIndex={0}\n            role=\"button\"\n            aria-label={`${field.name}${t('dialogs.sortModal.dragToSort')}`}\n            {...listeners}\n          >\n            <HiArrowsUpDown\n              className=\"w-5 h-5 text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-300 transition-colors duration-150\"\n              aria-hidden=\"true\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\ninterface SortModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  fields: Field[];\n  onDragEnd: (event: DragEndEvent) => void;\n  onSave: () => void;\n  onToggleDisplay: (fieldId: string) => void;\n}\n\nconst SortModal: React.FC<SortModalProps> = ({\n  isOpen,\n  onClose,\n  fields,\n  onDragEnd,\n  onSave,\n  onToggleDisplay,\n}) => {\n  const { t } = useI18n();\n\n  // アクセシビリティ関連フック\n  const { modalProps } = useModalAccessibility(isOpen);\n  const { announcePolite } = useLiveRegion();\n\n  // キーボードナビゲーション\n  const keyboardHandlers = {\n    onEscape: onClose,\n  };\n  const { handleKeyDown } = useKeyboardNavigation(keyboardHandlers);\n\n  // ドラッグ&ドロップセンサーの設定\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  // ドラッグ終了時の処理（アナウンス付き）\n  const handleDragEnd = useCallback(\n    (event: DragEndEvent) => {\n      const { active, over } = event;\n\n      if (active.id !== over?.id) {\n        // 実際の並び替え処理\n        onDragEnd(event);\n\n        // 項目名を取得してアナウンス\n        const activeField = fields.find(f => f.fieldId === active.id);\n        const overField = fields.find(f => f.fieldId === over?.id);\n\n        if (activeField && overField) {\n          announcePolite(\n            `${activeField.name}${t('dialogs.sortModal.dragEndAnnouncement', {\n              target: overField.name,\n            })}`\n          );\n        }\n      }\n    },\n    [onDragEnd, fields, announcePolite, t]\n  );\n\n  // 保存時のアナウンス\n  const handleSave = useCallback(() => {\n    onSave();\n    announcePolite(t('dialogs.sortModal.savedAnnouncement'));\n  }, [onSave, announcePolite, t]);\n\n  // モーダル開閉時のアナウンス\n  useEffect(() => {\n    if (isOpen) {\n      announcePolite(t('dialogs.sortModal.openedAnnouncement'));\n    }\n  }, [isOpen, announcePolite, t]);\n\n  // HeadlessUIの自動body制御を無効化（モバイル表示問題の修正）\n  useEffect(() => {\n    if (isOpen) {\n      // シンプルなoverflow制御のみ（スクロールバー幅計算なし）\n      document.body.style.overflow = 'hidden';\n      // HeadlessUIによる意図しないpadding-rightを防ぐ\n      document.body.style.paddingRight = '0px';\n    }\n\n    return () => {\n      // 確実に復元\n      document.body.style.overflow = '';\n      document.body.style.paddingRight = '';\n    };\n  }, [isOpen]);\n\n  if (!isOpen) return null;\n\n  return createPortal(\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\" {...modalProps}>\n      {/* オーバーレイ */}\n      <div\n        className=\"fixed inset-0 backdrop-blur-sm\"\n        style={{ backgroundColor: 'rgba(0, 0, 0, 0.3)' }}\n        onClick={onClose}\n      />\n\n      {/* モーダルコンテンツ */}\n      <div className=\"flex min-h-full items-center justify-center p-4 text-center\">\n        <div\n          className=\"relative w-full max-w-sm sm:max-w-xl transform overflow-hidden rounded-2xl bg-white dark:bg-gray-800 p-4 sm:p-6 text-left align-middle shadow-xl transition-all\"\n          onKeyDown={handleKeyDown}\n          onClick={e => e.stopPropagation()}\n        >\n          <h3\n            className=\"text-xl sm:text-2xl font-bold leading-6 text-gray-900 dark:text-white mb-4 sm:mb-6 flex items-center gap-2\"\n            id=\"sort-modal-title\"\n          >\n            <HiBars3\n              className=\"w-5 h-5 sm:w-6 sm:h-6 text-purple-600 dark:text-purple-400\"\n              aria-hidden=\"true\"\n            />\n            {t('dialogs.sortModal.title')}\n          </h3>\n\n          <div className=\"mb-4\" id=\"sort-modal-description\">\n            <p className=\"text-gray-600 dark:text-gray-300 text-xs sm:text-sm\">\n              {t('dialogs.sortModal.description')}\n            </p>\n          </div>\n\n          <DndContext\n            sensors={sensors}\n            collisionDetection={closestCenter}\n            onDragEnd={handleDragEnd}\n            accessibility={{\n              announcements: {\n                onDragStart: ({ active }) => {\n                  const field = fields.find(f => f.fieldId === active.id);\n                  return `${field?.name || 'アイテム'}${t(\n                    'dialogs.sortModal.dragStartAnnouncement'\n                  )}`;\n                },\n                onDragOver: ({ active, over }) => {\n                  const activeField = fields.find(f => f.fieldId === active.id);\n                  const overField = fields.find(f => f.fieldId === over?.id);\n                  if (activeField && overField) {\n                    return `${activeField.name}${t(\n                      'dialogs.sortModal.dragOverAnnouncement',\n                      { target: overField.name }\n                    )}`;\n                  }\n                  return '';\n                },\n                onDragEnd: ({ active, over }) => {\n                  const activeField = fields.find(f => f.fieldId === active.id);\n                  const overField = fields.find(f => f.fieldId === over?.id);\n                  if (active.id === over?.id) {\n                    return `${activeField?.name || 'アイテム'}${t(\n                      'dialogs.sortModal.dragReturnAnnouncement'\n                    )}`;\n                  }\n                  if (activeField && overField) {\n                    return `${activeField.name}${t(\n                      'dialogs.sortModal.dragEndAnnouncement',\n                      { target: overField.name }\n                    )}`;\n                  }\n                  return `${activeField?.name || 'アイテム'}${t(\n                    'dialogs.sortModal.dragCompleteAnnouncement'\n                  )}`;\n                },\n                onDragCancel: ({ active }) => {\n                  const field = fields.find(f => f.fieldId === active.id);\n                  return `${field?.name || 'アイテム'}${t(\n                    'dialogs.sortModal.dragCancelAnnouncement'\n                  )}`;\n                },\n              },\n            }}\n          >\n            <SortableContext\n              items={fields.map(field => field.fieldId)}\n              strategy={verticalListSortingStrategy}\n            >\n              <div\n                className=\"space-y-2 max-h-[50vh] sm:max-h-[60vh] overflow-y-auto pr-1 sm:pr-2\"\n                role=\"list\"\n                aria-label={t('dialogs.sortModal.listLabel')}\n                aria-describedby=\"sort-modal-description\"\n              >\n                {fields.map(field => (\n                  <SortableItem\n                    key={field.fieldId}\n                    field={field}\n                    onToggleDisplay={onToggleDisplay}\n                  />\n                ))}\n              </div>\n            </SortableContext>\n          </DndContext>\n\n          <div\n            className=\"mt-4 sm:mt-6 flex flex-col sm:flex-row gap-3 sm:justify-end\"\n            role=\"group\"\n            aria-label={t('dialogs.sortModal.buttonsLabel')}\n          >\n            <button\n              type=\"button\"\n              className=\"bg-gray-400 dark:bg-gray-600 text-white px-4 sm:px-6 py-2 rounded-lg shadow-md hover:bg-gray-500 dark:hover:bg-gray-500 focus:outline-none focus:ring-2 focus:ring-gray-500 dark:focus:ring-gray-400 focus:ring-offset-2 transition-colors duration-200 font-medium flex items-center justify-center gap-2 text-sm sm:text-base\"\n              onClick={onClose}\n              aria-label={t('dialogs.sortModal.cancelLabel')}\n            >\n              <HiXMark className=\"w-4 h-4\" aria-hidden=\"true\" />\n              {t('common.cancel')}\n            </button>\n            <button\n              type=\"button\"\n              className=\"bg-purple-600 dark:bg-purple-700 text-white px-4 sm:px-6 py-2 rounded-lg shadow-md hover:bg-purple-700 dark:hover:bg-purple-600 focus:outline-none focus:ring-2 focus:ring-purple-500 dark:focus:ring-purple-400 focus:ring-offset-2 transition-colors duration-200 font-medium flex items-center justify-center gap-2 text-sm sm:text-base\"\n              onClick={handleSave}\n              aria-label={t('dialogs.sortModal.saveLabel')}\n            >\n              <HiCheckCircle className=\"w-4 h-4\" aria-hidden=\"true\" />\n              {t('common.save')}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>,\n    document.body\n  );\n};\n\nexport default SortModal;\n","// エラーの種類を定義\nexport enum ErrorType {\n  VALIDATION = 'validation',\n  NETWORK = 'network',\n  DATABASE = 'database',\n  PARSE = 'parse',\n  PERMISSION = 'permission',\n  UNKNOWN = 'unknown',\n}\n\n// データベース固有のエラータイプを追加\nexport enum DbErrorType {\n  CONNECTION_FAILED = 'connection_failed',\n  TRANSACTION_FAILED = 'transaction_failed',\n  DATA_CORRUPTED = 'data_corrupted',\n  QUOTA_EXCEEDED = 'quota_exceeded',\n  VERSION_ERROR = 'version_error',\n  UNKNOWN = 'unknown',\n}\n\n// エラー情報の型定義\nexport interface AppError {\n  type: ErrorType;\n  message: string;\n  originalError?: Error;\n  context?: Record<string, unknown>;\n}\n\n// データベースエラー情報の型定義\nexport interface DbError {\n  type: DbErrorType;\n  message: string;\n  originalError?: unknown;\n  retryable: boolean;\n}\n\n// エラー分類機能\nexport function classifyError(error: unknown): AppError {\n  // DbErrorをAppErrorに変換\n  if (\n    error &&\n    typeof error === 'object' &&\n    'type' in error &&\n    'retryable' in error &&\n    'message' in error\n  ) {\n    const errorObj = error as Record<string, unknown>;\n    if (Object.values(DbErrorType).includes(errorObj.type as DbErrorType)) {\n      const dbError = error as DbError;\n      return {\n        type: ErrorType.DATABASE,\n        message: dbError.message,\n        originalError: dbError.originalError as Error,\n        context: {\n          dbErrorType: dbError.type,\n          retryable: dbError.retryable,\n        },\n      };\n    }\n  }\n\n  if (error instanceof Error) {\n    const message = error.message.toLowerCase();\n\n    // データベース関連エラー\n    if (\n      message.includes('indexeddb') ||\n      message.includes('database') ||\n      message.includes('store')\n    ) {\n      return {\n        type: ErrorType.DATABASE,\n        message: 'データベース操作でエラーが発生しました',\n        originalError: error,\n      };\n    }\n\n    // パース関連エラー\n    if (\n      message.includes('parse') ||\n      message.includes('json') ||\n      message.includes('csv')\n    ) {\n      return {\n        type: ErrorType.PARSE,\n        message: 'データの解析でエラーが発生しました',\n        originalError: error,\n      };\n    }\n\n    // バリデーション関連エラー\n    if (\n      message.includes('validation') ||\n      message.includes('必須') ||\n      message.includes('形式')\n    ) {\n      return {\n        type: ErrorType.VALIDATION,\n        message: error.message,\n        originalError: error,\n      };\n    }\n\n    // ネットワーク関連エラー\n    if (\n      message.includes('network') ||\n      message.includes('fetch') ||\n      message.includes('request')\n    ) {\n      return {\n        type: ErrorType.NETWORK,\n        message: 'ネットワークエラーが発生しました',\n        originalError: error,\n      };\n    }\n\n    return {\n      type: ErrorType.UNKNOWN,\n      message: error.message,\n      originalError: error,\n    };\n  }\n\n  return {\n    type: ErrorType.UNKNOWN,\n    message: '予期しないエラーが発生しました',\n    context: { originalError: error },\n  };\n}\n\n// ユーザーフレンドリーなエラーメッセージを生成\nexport function getDisplayMessage(appError: AppError): string {\n  switch (appError.type) {\n    case ErrorType.VALIDATION:\n      return appError.message;\n\n    case ErrorType.DATABASE:\n      // データベース固有のエラーメッセージをカスタマイズ\n      if (appError.context?.dbErrorType) {\n        const dbErrorType = appError.context.dbErrorType as DbErrorType;\n        const isRetryable = appError.context.retryable as boolean;\n\n        switch (dbErrorType) {\n          case DbErrorType.QUOTA_EXCEEDED:\n            return 'ストレージ容量が不足しています。不要なデータを削除してから再度お試しくださいませ。';\n          case DbErrorType.CONNECTION_FAILED:\n            return isRetryable\n              ? 'データベース接続に失敗しました。しばらく待ってから再度お試しくださいませ。'\n              : 'データベース接続に問題があります。ページを再読み込みしてお試しくださいませ。';\n          case DbErrorType.TRANSACTION_FAILED:\n            return 'データベース処理中にエラーが発生しました。もう一度お試しくださいませ。';\n          case DbErrorType.DATA_CORRUPTED:\n            return 'データが破損している可能性があります。管理画面からデータの確認をお勧めいたします。';\n          case DbErrorType.VERSION_ERROR:\n            return 'データベースの更新中です。ページを再読み込みしてお試しくださいませ。';\n          default:\n            return (\n              appError.message || 'データベース操作でエラーが発生いたしました。'\n            );\n        }\n      }\n      return 'データの保存・読み込みに失敗いたしました。もう一度お試しくださいませ。';\n\n    case ErrorType.PARSE:\n      return 'ファイルの形式が正しくありません。ファイルの内容をご確認くださいませ。';\n\n    case ErrorType.NETWORK:\n      return 'ネットワーク接続に問題があります。接続状況をご確認くださいませ。';\n\n    case ErrorType.PERMISSION:\n      return 'この操作を実行する権限がありません。';\n\n    default:\n      return appError.message || '予期しないエラーが発生いたしました。';\n  }\n}\n\n// リトライ可能かどうかを判定\nexport function isRetryableError(appError: AppError): boolean {\n  if (\n    appError.type === ErrorType.DATABASE &&\n    appError.context?.retryable !== undefined\n  ) {\n    return appError.context.retryable as boolean;\n  }\n\n  // その他のエラータイプの場合のデフォルト値\n  switch (appError.type) {\n    case ErrorType.NETWORK:\n      return true;\n    case ErrorType.DATABASE:\n      return true;\n    case ErrorType.VALIDATION:\n    case ErrorType.PARSE:\n    case ErrorType.PERMISSION:\n      return false;\n    default:\n      return false;\n  }\n}\n\n// エラーログ出力（データベースエラーの詳細情報を含む）\nexport function logError(appError: AppError, context?: string): void {\n  const logMessage = context\n    ? `[${context}] ${appError.message}`\n    : appError.message;\n\n  if (appError.originalError) {\n    console.error(logMessage, appError.originalError);\n  } else {\n    console.error(logMessage, appError.context);\n  }\n\n  // データベースエラーの詳細情報をログ出力\n  if (appError.type === ErrorType.DATABASE && appError.context?.dbErrorType) {\n    console.error('Database Error Details:', {\n      dbErrorType: appError.context.dbErrorType,\n      retryable: appError.context.retryable,\n      context: context,\n    });\n  }\n}\n","import { useCallback } from 'react';\nimport { useToastStore } from '../store/toast';\nimport { classifyError, getDisplayMessage, logError } from '../utils/errorHandler';\nimport type { AppError } from '../utils/errorHandler';\n\nexport interface ErrorHandlerOptions {\n  showToast?: boolean;\n  logToConsole?: boolean;\n  context?: string;\n  fallbackMessage?: string;\n}\n\nexport function useErrorHandler() {\n  const { showError, showWarning } = useToastStore();\n\n  const handleError = useCallback(\n    (\n      error: unknown,\n      options: ErrorHandlerOptions = {}\n    ): AppError => {\n      const {\n        showToast = true,\n        logToConsole = true,\n        context,\n        fallbackMessage\n      } = options;\n\n      // エラーを分類\n      const appError = classifyError(error);\n\n      // コンソールログ出力\n      if (logToConsole) {\n        logError(appError, context);\n      }\n\n      // ユーザーに表示するメッセージを決定\n      const displayMessage = fallbackMessage || getDisplayMessage(appError);\n\n      // トースト表示\n      if (showToast) {\n        if (appError.type === 'validation') {\n          showWarning(displayMessage);\n        } else {\n          showError(displayMessage);\n        }\n      }\n\n      return appError;\n    },\n    [showError, showWarning]\n  );\n\n  // 非同期関数のエラーハンドリング用ヘルパー\n  const handleAsyncError = useCallback(\n    async <T>(\n      asyncFn: () => Promise<T>,\n      options: ErrorHandlerOptions = {}\n    ): Promise<T | null> => {\n      try {\n        return await asyncFn();\n      } catch (error) {\n        handleError(error, options);\n        return null;\n      }\n    },\n    [handleError]\n  );\n\n  // 複数のエラーを処理するヘルパー\n  const handleBatchErrors = useCallback(\n    (\n      errors: Array<{ error: unknown; context?: string }>,\n      options: ErrorHandlerOptions = {}\n    ): AppError[] => {\n      return errors.map(({ error, context }) =>\n        handleError(error, { ...options, context })\n      );\n    },\n    [handleError]\n  );\n\n  return {\n    handleError,\n    handleAsyncError,\n    handleBatchErrors\n  };\n}\n","import React, { useEffect, useState } from 'react';\nimport {\n  HiArrowLeft,\n  HiBars3,\n  HiCheckCircle,\n  HiClipboardDocumentList,\n  HiDocumentText,\n  HiEyeSlash,\n  HiPencil,\n  HiPlus,\n  HiTrash,\n  HiXMark,\n} from 'react-icons/hi2';\nimport Button from '../components/Button';\nimport DateTimeSelector from '../components/DateTimeSelector';\nimport NotesInput from '../components/NotesInput';\nimport SortModal from '../components/SortModal';\nimport { useFormAccessibility, useLiveRegion } from '../hooks/useAccessibility';\nimport { useErrorHandler } from '../hooks/useErrorHandler';\nimport { useFieldManagement } from '../hooks/useFieldManagement';\nimport { useI18n } from '../hooks/useI18n';\nimport { useRecordsStore } from '../store/records';\nimport { useToastStore } from '../store/toast';\nimport type { Field, RecordItem } from '../types/record';\nimport { isDev } from '../utils/devTools';\nimport {\n  performanceMonitor,\n  trackDatabaseOperation,\n} from '../utils/performanceMonitor';\nimport {\n  validateDateString,\n  validateFieldValue,\n  validateTimeString,\n} from '../utils/validation';\n\n// ローカル時間ベースの日時フォーマット関数\nconst formatLocalDate = (date: Date): string => {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n};\n\nconst formatLocalTime = (date: Date): string => {\n  const hours = String(date.getHours()).padStart(2, '0');\n  const minutes = String(date.getMinutes()).padStart(2, '0');\n  return `${hours}:${minutes}`;\n};\n\nconst formatLocalDateTime = (date: Date): string => {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  const hours = String(date.getHours()).padStart(2, '0');\n  const minutes = String(date.getMinutes()).padStart(2, '0');\n  const seconds = String(date.getSeconds()).padStart(2, '0');\n  return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;\n};\n\n// データ型オプションは動的に生成\n\nexport default function RecordInput() {\n  // 国際化フック\n  const {\n    t,\n    translateFieldName,\n    translateError,\n    getAriaLabel,\n    getAnnouncement,\n  } = useI18n();\n\n  // アクセシビリティフック\n  const { announcePolite } = useLiveRegion();\n  const { getFieldProps: _getFieldProps } = useFormAccessibility();\n\n  // エラーハンドリングフック\n  const { handleAsyncError: _handleAsyncError } = useErrorHandler();\n\n  // ストア\n  const {\n    fields,\n    loadFields,\n    addRecord,\n    loadRecords,\n    records,\n    fieldsOperation,\n  } = useRecordsStore();\n  const { showSuccess, showError } = useToastStore();\n\n  // カスタムフックからフィールド管理機能を取得\n  const fieldManagement = useFieldManagement();\n\n  // フォーム状態\n  const [values, setValues] = useState<\n    Record<string, string | number | boolean>\n  >({});\n  const [formError, setFormError] = useState<string | null>(null);\n\n  // 日時管理用のstate（デフォルトは現在時刻）\n  const [recordDate, setRecordDate] = useState(() => {\n    const now = new Date();\n    return formatLocalDate(now); // YYYY-MM-DD\n  });\n  const [recordTime, setRecordTime] = useState(() => {\n    const now = new Date();\n    return formatLocalTime(now); // HH:MM\n  });\n\n  // 備考管理用のstate\n  const [recordNotes, setRecordNotes] = useState<string>('');\n\n  // 並び替えモーダルの表示状態\n  const [_showSortModal, _setShowSortModal] = useState(false);\n\n  // パフォーマンス監視の初期化\n  useEffect(() => {\n    performanceMonitor.trackRender.start('RecordInput');\n    return () => {\n      performanceMonitor.trackRender.end('RecordInput');\n    };\n  });\n\n  // データ読み込み（パフォーマンス監視付き）\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        await trackDatabaseOperation('load-fields-input', async () => {\n          await loadFields();\n        });\n\n        await trackDatabaseOperation('load-records-input', async () => {\n          await loadRecords();\n        });\n      } catch (error) {\n        console.error('Data loading error:', error);\n      }\n    };\n\n    loadData();\n  }, [loadFields, loadRecords]);\n\n  // 開発環境でのパフォーマンス情報表示\n  useEffect(() => {\n    if (!isDev) return;\n\n    const logPerformanceInfo = () => {\n      console.group('🔍 RecordInput Performance Info');\n      console.log(`📊 Total Fields: ${fields.length}`);\n      console.log(`📊 Total Records: ${records.length}`);\n      console.log(`📊 Form Values Count: ${Object.keys(values).length}`);\n      console.log(`📊 Current Date: ${recordDate}`);\n      console.log(`📊 Current Time: ${recordTime}`);\n      console.groupEnd();\n    };\n\n    const timeout = setTimeout(logPerformanceInfo, 2000);\n    return () => clearTimeout(timeout);\n  }, [fields.length, records.length, values, recordDate, recordTime]);\n\n  const handleChange = (fieldId: string, value: string | number | boolean) => {\n    const interactionId =\n      performanceMonitor.trackInteraction.start('field-change');\n\n    setValues(prev => ({ ...prev, [fieldId]: value }));\n    setFormError(null); // エラーをクリア\n\n    // 値が変更されたことをアナウンス（但し過度にならないよう、boolean型のみ）\n    const field = fields.find(f => f.fieldId === fieldId);\n    if (field?.type === 'boolean' && typeof value === 'boolean') {\n      announcePolite(\n        getAnnouncement('fieldChanged', {\n          fieldName: translateFieldName(field.fieldId),\n          value: value ? t('fields.yes') : t('fields.no'),\n        })\n      );\n    }\n\n    performanceMonitor.trackInteraction.end(interactionId, 'field-change');\n  };\n\n  // 項目が入力されているかどうかを判定する関数\n  const hasValue = (\n    field: Field,\n    value: string | number | boolean | undefined\n  ): boolean => {\n    if (value === undefined || value === null) return false;\n    if (field.type === 'boolean') {\n      // boolean型の場合は、trueまたはfalseが明示的に設定されていれば有効\n      return value === true || value === false;\n    }\n    if (field.type === 'number') {\n      return typeof value === 'number' && !isNaN(value);\n    }\n    return typeof value === 'string' && value.trim().length > 0;\n  };\n\n  const validate = (): string | null => {\n    // 日付・時刻の基本バリデーション\n    if (!validateDateString(recordDate)) {\n      return '日付の形式が正しくありません (YYYY-MM-DD)';\n    }\n\n    if (!validateTimeString(recordTime)) {\n      return '時刻の形式が正しくありません (HH:mm)';\n    }\n\n    // 入力された項目のバリデーション\n    for (const field of fields) {\n      const val = values[field.fieldId];\n      if (hasValue(field, val)) {\n        const validationResult = validateFieldValue(val, field.type, {\n          required: false, // 必須ではないが、入力されている場合はバリデーション\n          min: field.type === 'number' ? 0 : undefined, // 数値は0以上\n          max: field.type === 'number' ? 10000 : undefined, // 数値は10000以下\n        });\n\n        if (!validationResult.isValid) {\n          return `${field.name}: ${validationResult.errors.join(', ')}`;\n        }\n      }\n    }\n\n    // 備考の長さバリデーション\n    if (recordNotes.length > 500) {\n      return '備考は500文字以内で入力してください';\n    }\n\n    // 記録する項目が1つもない場合はエラー\n    const hasAnyRecord =\n      recordNotes.trim() !== '' ||\n      fields.some(field => hasValue(field, values[field.fieldId]));\n\n    if (!hasAnyRecord) {\n      return t('validation.required');\n    }\n\n    return null;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    const interactionId =\n      performanceMonitor.trackInteraction.start('form-submit');\n\n    // バリデーション\n    const error = validate();\n    if (error) {\n      setFormError(error);\n      announcePolite(t('errors.inputError', { message: error }));\n      performanceMonitor.trackInteraction.end(\n        interactionId,\n        'form-submit-validation-error'\n      );\n      return;\n    }\n\n    try {\n      // 入力された項目数をカウント\n      let recordedCount = 0;\n\n      // 入力された項目のみ保存\n      const recordsToAdd: RecordItem[] = [];\n\n      // 入力されている項目のみ記録\n      for (const field of fields) {\n        const value = values[field.fieldId];\n        if (hasValue(field, value)) {\n          const selectedDateTime = new Date(`${recordDate}T${recordTime}:00`);\n          recordsToAdd.push({\n            id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n            fieldId: field.fieldId,\n            value: value,\n            date: recordDate,\n            time: recordTime,\n            datetime: formatLocalDateTime(selectedDateTime),\n          });\n          recordedCount++;\n        }\n      }\n\n      // 備考が入力されている場合、備考も保存\n      if (recordNotes.trim() !== '') {\n        const selectedDateTime = new Date(`${recordDate}T${recordTime}:00`);\n        recordsToAdd.push({\n          id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          fieldId: 'notes',\n          value: recordNotes.trim(),\n          date: recordDate,\n          time: recordTime,\n          datetime: formatLocalDateTime(selectedDateTime),\n        });\n        recordedCount++;\n      }\n\n      // レコードを一括で追加（パフォーマンス監視付き）\n      await trackDatabaseOperation(\n        'add-records-batch',\n        async () => {\n          for (const record of recordsToAdd) {\n            await addRecord(record);\n          }\n        },\n        recordsToAdd.length\n      );\n\n      // 記録成功をアナウンス\n      announcePolite(getAnnouncement('recordSaved', { count: recordedCount }));\n\n      // 記録成功の処理\n\n      // 保存が成功した場合のみクリアと成功メッセージ\n      setValues({});\n      showSuccess(t('pages.input.recordSuccess'));\n\n      // 全ての入力値をクリア（記録後は毎回空の状態にする）\n      setRecordNotes('');\n\n      // 現在時刻に更新\n      const now = new Date();\n      setRecordDate(formatLocalDate(now));\n      setRecordTime(formatLocalTime(now));\n\n      performanceMonitor.trackInteraction.end(\n        interactionId,\n        'form-submit-success'\n      );\n    } catch (error) {\n      console.error('Save error:', error);\n      const errorMessage = translateError(\n        'database',\n        t('pages.input.recordError')\n      );\n      setFormError(errorMessage);\n      showError(errorMessage);\n      performanceMonitor.trackInteraction.end(\n        interactionId,\n        'form-submit-error'\n      );\n    }\n  };\n\n  // 前回値を取得する関数\n  const getLastValue = (fieldId: string): string | number | boolean => {\n    const lastRecord = [...records]\n      .filter(record => record.fieldId === fieldId)\n      .sort(\n        (a, b) =>\n          new Date(b.datetime).getTime() - new Date(a.datetime).getTime()\n      )[0];\n    return lastRecord?.value ?? '';\n  };\n\n  // 前回値を設定するハンドラー\n  const handleSetLastValue = (fieldId: string) => {\n    const interactionId =\n      performanceMonitor.trackInteraction.start('set-last-value');\n\n    const lastValue = getLastValue(fieldId);\n    if (lastValue !== '') {\n      handleChange(fieldId, lastValue);\n      const field = fields.find(f => f.fieldId === fieldId);\n      if (field) {\n        announcePolite(\n          getAnnouncement('previousValueSet', {\n            fieldName: translateFieldName(field.fieldId),\n          })\n        );\n      }\n    }\n\n    performanceMonitor.trackInteraction.end(interactionId, 'set-last-value');\n  };\n\n  // 現在の日時を設定する関数\n  const handleSetCurrentDateTime = () => {\n    const now = new Date();\n    setRecordDate(formatLocalDate(now));\n    setRecordTime(formatLocalTime(now));\n    announcePolite(getAnnouncement('currentTimeSet'));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-sky-50 to-blue-100 dark:from-gray-800 dark:to-gray-900 p-2 sm:p-4\">\n      <div className=\"max-w-full sm:max-w-4xl mx-auto px-2 sm:px-0\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-2xl sm:text-4xl font-bold text-gray-800 dark:text-white mb-2 whitespace-nowrap\">\n            {t('pages.input.title')}\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-300 text-sm sm:text-base\">\n            {t('pages.input.description')}\n          </p>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-8 mb-12\">\n          {/* 日時選択セクション */}\n          <DateTimeSelector\n            recordDate={recordDate}\n            recordTime={recordTime}\n            onDateChange={setRecordDate}\n            onTimeChange={setRecordTime}\n            onSetCurrentDateTime={handleSetCurrentDateTime}\n          />\n\n          {/* 備考入力セクション */}\n          <NotesInput value={recordNotes} onChange={setRecordNotes} />\n\n          {/* フィールド入力セクション */}\n          {[...fields]\n            .filter(\n              field =>\n                field.defaultDisplay !== false ||\n                fieldManagement.temporaryDisplayFields.has(field.fieldId)\n            )\n            .sort((a, b) => (a.order || 999) - (b.order || 999))\n            .map(field => (\n              <div\n                key={field.fieldId}\n                className=\"bg-white dark:bg-gray-800 p-6 rounded-2xl shadow-md\"\n              >\n                {fieldManagement.editFieldId === field.fieldId ? (\n                  <div>\n                    {/* 項目名入力（左）と単位入力（右）のレイアウト */}\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2 items-stretch mb-4\">\n                      <div className=\"text-left sm:text-right pr-0 sm:pr-2 border-b sm:border-b-0 sm:border-r border-gray-200 pb-2 sm:pb-0\">\n                        <input\n                          type=\"text\"\n                          value={fieldManagement.editField.name ?? ''}\n                          onChange={e =>\n                            fieldManagement.setEditField(f => ({\n                              ...f,\n                              name: e.target.value,\n                            }))\n                          }\n                          className=\"w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600\"\n                          placeholder={t(\n                            'pages.input.fieldManagement.fieldName'\n                          )}\n                        />\n                      </div>\n                      <div className=\"pl-0 sm:pl-2 pt-2 sm:pt-0\">\n                        {field.type === 'boolean' ? (\n                          // boolean型の項目は右側を空白地帯に\n                          <div className=\"h-full\"></div>\n                        ) : (\n                          // boolean型以外は単位入力\n                          <input\n                            type=\"text\"\n                            value={fieldManagement.editField.unit ?? ''}\n                            onChange={e =>\n                              fieldManagement.setEditField(f => ({\n                                ...f,\n                                unit: e.target.value,\n                              }))\n                            }\n                            className=\"w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600\"\n                            placeholder={t(\n                              'pages.input.fieldManagement.unitPlaceholder'\n                            )}\n                          />\n                        )}\n                      </div>\n                    </div>\n\n                    {/* 保存・キャンセルボタン（中央寄せ） */}\n                    <div className=\"flex gap-2 sm:gap-3 justify-center mt-4 pt-4 border-t border-gray-200\">\n                      <Button\n                        variant=\"success\"\n                        size=\"md\"\n                        icon={HiCheckCircle}\n                        onClick={fieldManagement.handleEditFieldSave}\n                        className=\"flex-1 sm:min-w-[120px]\"\n                      >\n                        {t('actions.save')}\n                      </Button>\n                      <Button\n                        variant=\"secondary\"\n                        size=\"md\"\n                        icon={HiXMark}\n                        onClick={() => {\n                          fieldManagement.setEditFieldId(null);\n                          fieldManagement.setEditField({});\n                          fieldManagement.clearButtons(); // ボタン表示をクリア\n                        }}\n                        className=\"flex-1 sm:min-w-[120px]\"\n                      >\n                        {t('actions.cancel')}\n                      </Button>\n                    </div>\n                  </div>\n                ) : (\n                  <div>\n                    {/* 項目表示（入力・単位のレイアウト） */}\n                    <div\n                      className=\"grid grid-cols-1 sm:grid-cols-2 gap-2 items-stretch cursor-pointer\"\n                      onClick={() =>\n                        fieldManagement.toggleButtons(field.fieldId)\n                      }\n                    >\n                      <div className=\"text-xl font-medium text-gray-700 dark:text-gray-200 text-left sm:text-right pr-0 sm:pr-2 border-b sm:border-b-0 sm:border-r border-gray-200 dark:border-gray-600 pb-2 sm:pb-0\">\n                        {field.name}\n                      </div>\n                      <div className=\"text-lg text-gray-800 dark:text-gray-200 font-semibold pl-0 sm:pl-2 text-left pt-2 sm:pt-0\">\n                        <div className=\"flex items-center gap-3\">\n                          {field.type === 'boolean' ? (\n                            <div className=\"flex items-center gap-2\">\n                              <Button\n                                variant=\"success\"\n                                size=\"sm\"\n                                onClick={e => {\n                                  e.stopPropagation();\n                                  handleChange(field.fieldId, true);\n                                }}\n                                className={\n                                  values[field.fieldId] === true\n                                    ? 'bg-green-100 dark:bg-green-900/30 border-green-500 dark:border-green-400 text-green-700 dark:text-green-300 border-2'\n                                    : ''\n                                }\n                                aria-label={getAriaLabel('setToYes', {\n                                  fieldName: translateFieldName(field.fieldId),\n                                })}\n                              >\n                                {t('fields.yes')}\n                              </Button>\n                              <Button\n                                variant=\"danger\"\n                                size=\"sm\"\n                                onClick={e => {\n                                  e.stopPropagation();\n                                  handleChange(field.fieldId, false);\n                                }}\n                                className={\n                                  values[field.fieldId] === false\n                                    ? 'bg-red-100 dark:bg-red-900/30 border-red-500 dark:border-red-400 text-red-700 dark:text-red-300 border-2'\n                                    : ''\n                                }\n                                aria-label={getAriaLabel('setToNo', {\n                                  fieldName: translateFieldName(field.fieldId),\n                                })}\n                              >\n                                {t('fields.no')}\n                              </Button>\n                              {values[field.fieldId] !== undefined && (\n                                <Button\n                                  variant=\"secondary\"\n                                  size=\"sm\"\n                                  onClick={e => {\n                                    e.stopPropagation();\n                                    setValues(prev => {\n                                      const newValues = { ...prev };\n                                      delete newValues[field.fieldId];\n                                      return newValues;\n                                    });\n                                  }}\n                                  aria-label={getAriaLabel('clearSelection', {\n                                    fieldName: translateFieldName(\n                                      field.fieldId\n                                    ),\n                                  })}\n                                  title={t('fields.clearSelection')}\n                                >\n                                  ×\n                                </Button>\n                              )}\n                            </div>\n                          ) : (\n                            <input\n                              type={field.type === 'number' ? 'number' : 'text'}\n                              value={String(values[field.fieldId] || '')}\n                              onChange={e =>\n                                handleChange(\n                                  field.fieldId,\n                                  field.type === 'number'\n                                    ? Number(e.target.value) || ''\n                                    : e.target.value\n                                )\n                              }\n                              onClick={e => e.stopPropagation()} // 親のクリックイベントを防ぐ\n                              className=\"border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-white rounded-lg px-3 py-2 w-full focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 dark:focus:ring-blue-400 dark:focus:border-blue-400\"\n                              aria-label={getAriaLabel('inputField', {\n                                fieldName: translateFieldName(field.fieldId),\n                              })}\n                            />\n                          )}\n                          <div className=\"w-full sm:w-32\">\n                            {field.unit && (\n                              <span className=\"text-gray-600 dark:text-gray-400 font-medium\">\n                                {field.unit}\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* 前回値・編集・非表示ボタン（クリックで表示/非表示） */}\n                    {fieldManagement.areButtonsShown(field.fieldId) && (\n                      <div className=\"grid grid-cols-3 gap-2 mt-4 pt-4 border-t border-gray-200\">\n                        <Button\n                          variant=\"sky\"\n                          size=\"sm\"\n                          icon={HiClipboardDocumentList}\n                          onClick={() => handleSetLastValue(field.fieldId)}\n                          aria-label={getAriaLabel('setPreviousValue', {\n                            fieldName: translateFieldName(field.fieldId),\n                          })}\n                        >\n                          {t('actions.lastValue')}\n                        </Button>\n                        <Button\n                          variant=\"primary\"\n                          size=\"sm\"\n                          icon={HiPencil}\n                          onClick={() => fieldManagement.handleEditField(field)}\n                          aria-label={getAriaLabel('editField', {\n                            fieldName: translateFieldName(field.fieldId),\n                          })}\n                        >\n                          {t('actions.edit')}\n                        </Button>\n                        <Button\n                          variant=\"danger\"\n                          size=\"sm\"\n                          icon={HiEyeSlash}\n                          onClick={() => fieldManagement.handleHideField(field)}\n                          aria-label={getAriaLabel('hideField', {\n                            fieldName: translateFieldName(field.fieldId),\n                          })}\n                        >\n                          {t('actions.hide')}\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            ))}\n\n          {formError && (\n            <div\n              id=\"form-error\"\n              className=\"text-red-600 dark:text-red-400 font-semibold bg-red-50 dark:bg-red-900/20 p-4 rounded-lg border border-red-200 dark:border-red-800\"\n              role=\"alert\"\n              aria-live=\"polite\"\n            >\n              <span className=\"sr-only\">{t('aria.formError')}</span>\n              {formError}\n            </div>\n          )}\n\n          <Button\n            type=\"submit\"\n            variant=\"success\"\n            size=\"lg\"\n            icon={HiDocumentText}\n            fullWidth\n            aria-describedby={formError ? 'form-error' : undefined}\n          >\n            {t('pages.input.record')}\n          </Button>\n        </form>\n\n        {/* 項目選択・管理セクション */}\n        <div className=\"mb-8\">\n          {fieldManagement.showSelectField ? (\n            <div className=\"bg-white dark:bg-gray-800 p-6 rounded-2xl shadow-md\">\n              <h3 className=\"text-2xl font-semibold text-gray-800 dark:text-white mb-4 flex items-center gap-2\">\n                <HiClipboardDocumentList className=\"w-6 h-6 text-blue-600 dark:text-blue-400\" />\n                {t('pages.input.fieldManagement.selectFieldsTitle')}\n              </h3>\n              <div className=\"space-y-4\">\n                {fieldManagement.getHiddenFields().length > 0 && (\n                  <>\n                    <h4 className=\"text-xl font-medium text-gray-700 dark:text-gray-200 text-left\">\n                      {t('pages.input.fieldManagement.existingFields')}\n                    </h4>\n                    <div className=\"space-y-3\">\n                      {fieldManagement.getHiddenFields().map(field => (\n                        <div\n                          key={field.fieldId}\n                          className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4\"\n                        >\n                          {fieldManagement.editingExistingFieldId ===\n                          field.fieldId ? (\n                            <div className=\"space-y-4\">\n                              {/* 編集モード：左右分割レイアウト */}\n                              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2 items-stretch\">\n                                <div className=\"text-left sm:text-right pr-0 sm:pr-2 border-b sm:border-b-0 sm:border-r border-gray-200 pb-2 sm:pb-0\">\n                                  <input\n                                    type=\"text\"\n                                    value={\n                                      fieldManagement.editingExistingField\n                                        .name ?? ''\n                                    }\n                                    onChange={e =>\n                                      fieldManagement.setEditingExistingField(\n                                        f => ({ ...f, name: e.target.value })\n                                      )\n                                    }\n                                    className=\"w-full border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-white rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 dark:focus:ring-blue-400 dark:focus:border-blue-400\"\n                                    placeholder={t(\n                                      'pages.input.fieldManagement.fieldName'\n                                    )}\n                                  />\n                                </div>\n                                <div className=\"pl-0 sm:pl-2 pt-2 sm:pt-0\">\n                                  <input\n                                    type=\"text\"\n                                    value={\n                                      fieldManagement.editingExistingField\n                                        .unit ?? ''\n                                    }\n                                    onChange={e =>\n                                      fieldManagement.setEditingExistingField(\n                                        f => ({ ...f, unit: e.target.value })\n                                      )\n                                    }\n                                    className=\"w-full border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-white rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 dark:focus:ring-blue-400 dark:focus:border-blue-400\"\n                                    placeholder={t(\n                                      'pages.input.fieldManagement.unitPlaceholder'\n                                    )}\n                                  />\n                                </div>\n                              </div>\n\n                              <div className=\"flex gap-2 sm:gap-3 justify-center pt-2 border-t border-gray-200\">\n                                <Button\n                                  variant=\"success\"\n                                  size=\"md\"\n                                  icon={HiCheckCircle}\n                                  onClick={\n                                    fieldManagement.handleEditExistingFieldSave\n                                  }\n                                  className=\"flex-1 sm:min-w-[120px]\"\n                                >\n                                  {t('actions.save')}\n                                </Button>\n                                <Button\n                                  variant=\"secondary\"\n                                  size=\"md\"\n                                  icon={HiXMark}\n                                  onClick={() => {\n                                    fieldManagement.setEditingExistingFieldId(\n                                      null\n                                    );\n                                    fieldManagement.clearSelectButtons(); // 選択ボタン表示をクリア\n                                  }}\n                                  className=\"flex-1 sm:min-w-[120px]\"\n                                >\n                                  {t('actions.cancel')}\n                                </Button>\n                              </div>\n                            </div>\n                          ) : (\n                            <div>\n                              {/* 通常表示：左右分割レイアウト */}\n                              <div\n                                className=\"grid grid-cols-1 sm:grid-cols-2 gap-2 items-stretch cursor-pointer\"\n                                onClick={() =>\n                                  fieldManagement.toggleSelectButtons(\n                                    field.fieldId\n                                  )\n                                }\n                              >\n                                <div className=\"text-xl font-medium text-gray-700 dark:text-gray-200 text-left sm:text-right pr-0 sm:pr-2 border-b sm:border-b-0 sm:border-r border-gray-200 dark:border-gray-600 pb-2 sm:pb-0\">\n                                  {field.name}\n                                </div>\n                                <div className=\"text-lg text-gray-800 dark:text-gray-200 font-semibold pl-0 sm:pl-2 text-left pt-2 sm:pt-0\">\n                                  {field.unit ? `(${field.unit})` : ''}\n                                </div>\n                              </div>\n\n                              {/* 表示・追加・編集・削除ボタン（クリックで表示/非表示） */}\n                              {fieldManagement.areSelectButtonsShown(\n                                field.fieldId\n                              ) && (\n                                <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-2 sm:gap-3 mt-4 pt-4 border-t border-gray-200\">\n                                  <Button\n                                    variant=\"success\"\n                                    size=\"sm\"\n                                    icon={HiCheckCircle}\n                                    onClick={() =>\n                                      fieldManagement.handleShowExistingFieldPermanently(\n                                        field.fieldId\n                                      )\n                                    }\n                                  >\n                                    {t('actions.display')}\n                                  </Button>\n                                  <Button\n                                    variant=\"teal\"\n                                    size=\"sm\"\n                                    icon={HiPlus}\n                                    onClick={() =>\n                                      fieldManagement.handleShowExistingField(\n                                        field.fieldId\n                                      )\n                                    }\n                                  >\n                                    {t('actions.add')}\n                                  </Button>\n                                  <Button\n                                    variant=\"primary\"\n                                    size=\"sm\"\n                                    icon={HiPencil}\n                                    onClick={() =>\n                                      fieldManagement.handleEditExistingField(\n                                        field\n                                      )\n                                    }\n                                  >\n                                    {t('actions.edit')}\n                                  </Button>\n                                  <Button\n                                    variant=\"danger\"\n                                    size=\"sm\"\n                                    icon={HiTrash}\n                                    onClick={() =>\n                                      fieldManagement.handleDeleteExistingField(\n                                        field\n                                      )\n                                    }\n                                  >\n                                    {t('actions.delete')}\n                                  </Button>\n                                </div>\n                              )}\n                            </div>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  </>\n                )}\n                {fieldManagement.showAddField && (\n                  <form\n                    onSubmit={fieldManagement.handleAddField}\n                    className=\"bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4\"\n                  >\n                    <h4 className=\"text-xl font-medium text-gray-700 dark:text-gray-200 mb-4 text-left flex items-center gap-2\">\n                      <HiPlus\n                        className=\"w-6 h-6 text-green-600 dark:text-green-400\"\n                        aria-hidden=\"true\"\n                      />\n                      {t('pages.input.fieldManagement.addNewField')}\n                    </h4>\n                    <fieldset className=\"space-y-4\">\n                      <legend className=\"sr-only\">\n                        {t('aria.newFieldDetails')}\n                      </legend>\n                      <div className=\"flex flex-col sm:flex-row gap-3\">\n                        <div className=\"flex-1\">\n                          <label\n                            htmlFor=\"new-field-name\"\n                            className=\"block text-sm font-medium text-gray-700 dark:text-gray-200 mb-1\"\n                          >\n                            {t('pages.input.fieldManagement.fieldNameRequired')}{' '}\n                            <span\n                              className=\"text-red-600\"\n                              aria-label={t('fields.required')}\n                            >\n                              *\n                            </span>\n                          </label>\n                          <input\n                            id=\"new-field-name\"\n                            type=\"text\"\n                            value={fieldManagement.newField.name}\n                            onChange={e =>\n                              fieldManagement.setNewField(f => ({\n                                ...f,\n                                name: e.target.value,\n                              }))\n                            }\n                            className=\"w-full border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-white rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 dark:focus:ring-blue-400 dark:focus:border-blue-400\"\n                            placeholder={t(\n                              'pages.input.fieldManagement.fieldNamePlaceholder'\n                            )}\n                            required\n                            aria-required=\"true\"\n                            aria-describedby=\"new-field-name-desc\"\n                            aria-invalid={\n                              fieldManagement.addFieldError &&\n                              fieldManagement.addFieldError.includes(\n                                t('validation.fieldNameRequired')\n                              )\n                                ? 'true'\n                                : 'false'\n                            }\n                          />\n                          <div id=\"new-field-name-desc\" className=\"sr-only\">\n                            {t('aria.fieldNameDescription')}\n                          </div>\n                        </div>\n                        <div className=\"w-full sm:w-32\">\n                          <label\n                            htmlFor=\"new-field-type\"\n                            className=\"block text-sm font-medium text-gray-700 dark:text-gray-200 mb-1\"\n                          >\n                            {t('pages.input.fieldManagement.dataTypeRequired')}{' '}\n                            <span\n                              className=\"text-red-600\"\n                              aria-label={t('fields.required')}\n                            >\n                              *\n                            </span>\n                          </label>\n                          <select\n                            id=\"new-field-type\"\n                            value={fieldManagement.newField.type}\n                            onChange={e =>\n                              fieldManagement.setNewField(f => ({\n                                ...f,\n                                type: e.target.value as\n                                  | 'number'\n                                  | 'string'\n                                  | 'boolean',\n                              }))\n                            }\n                            className=\"w-full border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-white rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 dark:focus:ring-blue-400 dark:focus:border-blue-400\"\n                            required\n                            aria-required=\"true\"\n                            aria-describedby=\"new-field-type-desc\"\n                          >\n                            <option value=\"number\">\n                              {t('fields.types.number')}\n                            </option>\n                            <option value=\"string\">\n                              {t('fields.types.string')}\n                            </option>\n                            <option value=\"boolean\">\n                              {t('fields.types.boolean')}\n                            </option>\n                          </select>\n                          <div id=\"new-field-type-desc\" className=\"sr-only\">\n                            {t('aria.dataTypeDescription')}\n                          </div>\n                        </div>\n                        <div className=\"w-full sm:w-32\">\n                          <label\n                            htmlFor=\"new-field-unit\"\n                            className=\"block text-sm font-medium text-gray-700 dark:text-gray-200 mb-1\"\n                          >\n                            {t('pages.input.fieldManagement.unitOptional')}\n                          </label>\n                          <input\n                            id=\"new-field-unit\"\n                            type=\"text\"\n                            value={fieldManagement.newField.unit}\n                            onChange={e =>\n                              fieldManagement.setNewField(f => ({\n                                ...f,\n                                unit: e.target.value,\n                              }))\n                            }\n                            placeholder={t('fields.inputPlaceholder', {\n                              example: 'kg',\n                            })}\n                            className=\"border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-white rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-600 dark:focus:ring-blue-400 focus:border-blue-600 dark:focus:border-blue-400\"\n                            aria-describedby=\"unit-description\"\n                            aria-label={t('aria.unitFieldDescription')}\n                          />\n                          <div id=\"unit-description\" className=\"sr-only\">\n                            {t('aria.unitFieldDescription')}\n                          </div>\n                        </div>\n                      </div>\n\n                      {fieldManagement.addFieldError && (\n                        <div\n                          id=\"add-field-error\"\n                          className=\"text-red-600 dark:text-red-400 font-semibold bg-red-50 dark:bg-red-900/20 p-3 rounded-lg border border-red-200 dark:border-red-800\"\n                          role=\"alert\"\n                          aria-live=\"polite\"\n                        >\n                          <span className=\"sr-only\">{t('aria.formError')}</span>\n                          {fieldManagement.addFieldError}\n                        </div>\n                      )}\n                      <div className=\"flex gap-2 sm:gap-3 pt-2\">\n                        <button\n                          type=\"submit\"\n                          className=\"bg-teal-500 text-white px-3 sm:px-6 py-2 sm:py-3 rounded-lg shadow-md hover:bg-teal-600 transition-colors duration-200 font-medium flex items-center justify-center gap-2 focus:outline-none focus:ring-2 focus:ring-teal-500 focus:ring-offset-2 text-sm sm:text-base flex-1 sm:min-w-[120px]\"\n                          aria-describedby={\n                            fieldManagement.addFieldError\n                              ? 'add-field-error'\n                              : undefined\n                          }\n                        >\n                          <HiPlus className=\"w-4 h-4\" aria-hidden=\"true\" />\n                          {t('actions.add')}\n                        </button>\n                        <button\n                          type=\"button\"\n                          onClick={() => fieldManagement.setShowAddField(false)}\n                          className=\"bg-gray-400 text-white px-3 sm:px-6 py-2 sm:py-3 rounded-lg shadow-md hover:bg-gray-500 transition-colors duration-200 font-medium flex items-center justify-center gap-2 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-2 text-sm sm:text-base flex-1 sm:min-w-[120px]\"\n                        >\n                          <HiXMark className=\"w-4 h-4\" aria-hidden=\"true\" />\n                          {t('actions.cancel')}\n                        </button>\n                      </div>\n                    </fieldset>\n                  </form>\n                )}\n                <div className=\"flex flex-col sm:flex-row gap-3 pt-4\">\n                  {!fieldManagement.showAddField && (\n                    <button\n                      type=\"button\"\n                      onClick={() => fieldManagement.setShowAddField(true)}\n                      className=\"bg-teal-500 text-white px-3 sm:px-4 py-2 rounded-lg shadow-md hover:bg-teal-600 transition-colors duration-200 font-medium flex items-center justify-center gap-2 text-sm sm:text-base whitespace-nowrap\"\n                    >\n                      <HiPlus className=\"w-4 h-4\" />\n                      {t('pages.input.fieldManagement.addNewField')}\n                    </button>\n                  )}\n                  <button\n                    type=\"button\"\n                    onClick={() => fieldManagement.setShowSelectField(false)}\n                    className=\"bg-gray-500 text-white px-3 sm:px-4 py-2 rounded-lg shadow-md hover:bg-gray-600 transition-colors duration-200 font-medium flex items-center justify-center gap-2 text-sm sm:text-base\"\n                  >\n                    <HiArrowLeft className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n                    {t('actions.back')}\n                  </button>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"flex flex-col sm:flex-row gap-3\">\n              <button\n                type=\"button\"\n                onClick={() => fieldManagement.setShowSelectField(true)}\n                className=\"bg-blue-500 text-white px-4 sm:px-6 py-2 sm:py-3 rounded-lg shadow-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors duration-200 font-medium flex items-center justify-center gap-2 text-sm sm:text-base\"\n                aria-label={getAriaLabel('showField', {\n                  fieldName: t('pages.input.selectFields'),\n                })}\n              >\n                <HiClipboardDocumentList\n                  className=\"w-4 h-4 sm:w-5 sm:h-5\"\n                  aria-hidden=\"true\"\n                />\n                {t('pages.input.selectFields')}\n              </button>\n              <button\n                type=\"button\"\n                onClick={fieldManagement.handleOpenSortModal}\n                disabled={fieldsOperation.loading || fields.length === 0}\n                className={`px-4 sm:px-6 py-2 sm:py-3 rounded-lg shadow-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition-colors duration-200 font-medium flex items-center justify-center gap-2 text-sm sm:text-base ${\n                  fieldsOperation.loading || fields.length === 0\n                    ? 'bg-gray-400 text-white cursor-not-allowed'\n                    : 'bg-purple-500 text-white hover:bg-purple-600'\n                }`}\n                aria-label={getAriaLabel('sort', {\n                  fieldName: t('pages.input.sortFields'),\n                })}\n              >\n                <HiBars3 className=\"w-4 h-4 sm:w-5 sm:h-5\" aria-hidden=\"true\" />\n                {fieldsOperation.loading\n                  ? t('common.loading')\n                  : t('pages.input.sortFields')}\n              </button>\n            </div>\n          )}\n        </div>\n\n        {/* 並び替えモーダル */}\n        <SortModal\n          isOpen={fieldManagement.showSortModal}\n          onClose={() => fieldManagement.setShowSortModal(false)}\n          fields={fieldManagement.sortableFields}\n          onDragEnd={fieldManagement.handleDragEnd}\n          onSave={fieldManagement.handleSaveSortOrder}\n          onToggleDisplay={fieldManagement.handleToggleDisplayInModal}\n        />\n      </div>\n    </div>\n  );\n}\n","import type { DragEndEvent } from '@dnd-kit/core';\nimport { arrayMove } from '@dnd-kit/sortable';\nimport { useCallback, useRef, useState } from 'react';\nimport { useRecordsStore } from '../store/records';\nimport { useToastStore } from '../store/toast';\nimport type { Field } from '../types/record';\nimport { useErrorHandler } from './useErrorHandler';\nimport { useI18n } from './useI18n';\n\ntype NewField = {\n  name: string;\n  type: 'number' | 'string' | 'boolean';\n  unit?: string;\n};\n\nexport function useFieldManagement() {\n  const { t, getAnnouncement } = useI18n();\n  const { fields, loadFields, addField, updateField, deleteField } =\n    useRecordsStore();\n  const { showSuccess, showError } = useToastStore();\n  const { handleAsyncError } = useErrorHandler();\n\n  // 状態管理\n  const [showSelectField, setShowSelectField] = useState(false);\n  const [showAddField, setShowAddField] = useState(false);\n  const [newField, setNewField] = useState<NewField>({\n    name: '',\n    type: 'number',\n    unit: '',\n  });\n  const [editFieldId, setEditFieldId] = useState<string | null>(null);\n  const [editField, setEditField] = useState<Partial<Field>>({});\n  const [addFieldError, setAddFieldError] = useState<string | null>(null);\n  const [editingExistingFieldId, setEditingExistingFieldId] = useState<\n    string | null\n  >(null);\n  const [editingExistingField, setEditingExistingField] = useState<\n    Partial<Field>\n  >({});\n  const [temporaryDisplayFields, setTemporaryDisplayFields] = useState<\n    Set<string>\n  >(new Set());\n  const [showButtons, setShowButtons] = useState<Set<string>>(new Set());\n  const [showSelectButtons, setShowSelectButtons] = useState<Set<string>>(\n    new Set()\n  );\n  const [showSortModal, setShowSortModal] = useState(false);\n  const [sortableFields, setSortableFields] = useState<Field[]>([]);\n  const sortableFieldsRef = useRef<Field[]>([]);\n\n  // 次のデフォルト順序を計算する関数\n  const getNextDefaultOrder = useCallback((): number => {\n    if (fields.length === 0) return 1;\n    const maxOrder = Math.max(...fields.map(f => f.order || 0));\n    return maxOrder + 1;\n  }, [fields]);\n\n  // 非表示項目のリストを取得（order順でソート）\n  const getHiddenFields = useCallback(() => {\n    return fields\n      .filter(field => field.defaultDisplay === false)\n      .sort((a, b) => (a.order || 999) - (b.order || 999));\n  }, [fields]);\n\n  // 新しいフィールドを追加\n  const handleAddField = useCallback(\n    async (e: React.FormEvent) => {\n      e.preventDefault();\n      setAddFieldError(null);\n\n      if (!newField.name.trim()) {\n        setAddFieldError(t('validation.fieldNameInput'));\n        return;\n      }\n\n      if (fields.some(f => f.name === newField.name.trim())) {\n        setAddFieldError(t('validation.duplicateFieldName'));\n        return;\n      }\n\n      const fieldId = newField.name.trim().replace(/\\s+/g, '_').toLowerCase();\n\n      const result = await handleAsyncError(\n        async () => {\n          await addField({\n            fieldId,\n            name: newField.name.trim(),\n            type: newField.type,\n            unit: newField.unit?.trim() || undefined,\n            order: getNextDefaultOrder(),\n            defaultDisplay: false,\n          });\n\n          // 非表示項目として追加するので、一時的に表示リストに追加\n          setTemporaryDisplayFields(prev => new Set([...prev, fieldId]));\n\n          setNewField({ name: '', type: 'number', unit: '' });\n          setShowAddField(false);\n          setShowSelectField(false);\n          await loadFields();\n          return true;\n        },\n        {\n          context: t('actions.add'),\n          fallbackMessage: t('errors.general'),\n        }\n      );\n\n      if (result) {\n        showSuccess(getAnnouncement('fieldAddedSuccess'));\n      }\n    },\n    [\n      newField,\n      fields,\n      addField,\n      getNextDefaultOrder,\n      handleAsyncError,\n      loadFields,\n      showSuccess,\n    ]\n  );\n\n  // フィールド編集\n  const handleEditField = useCallback((field: Field) => {\n    setEditFieldId(field.fieldId);\n    setEditField({\n      name: field.name,\n      unit: field.unit,\n    });\n  }, []);\n\n  const handleEditFieldSave = useCallback(async () => {\n    if (!editFieldId || !editField.name?.trim()) {\n      setEditFieldId(null);\n      setEditField({});\n      setShowButtons(new Set());\n      return;\n    }\n\n    const original = fields.find(f => f.fieldId === editFieldId);\n    if (!original) return;\n\n    const result = await handleAsyncError(\n      async () => {\n        await updateField({\n          ...original,\n          name: editField.name!.trim(),\n          unit: editField.unit?.trim() || undefined,\n        });\n        await loadFields();\n        return true;\n      },\n      {\n        context: t('actions.edit'),\n        fallbackMessage: t('errors.general'),\n      }\n    );\n\n    if (result) {\n      showSuccess(getAnnouncement('fieldEditedSuccess'));\n    }\n\n    setEditFieldId(null);\n    setEditField({});\n    setShowButtons(new Set());\n  }, [\n    editFieldId,\n    editField,\n    fields,\n    updateField,\n    handleAsyncError,\n    loadFields,\n    showSuccess,\n  ]);\n\n  // 非表示項目を一時的に表示に追加する関数\n  const handleShowExistingField = useCallback(\n    (fieldId: string) => {\n      const field = fields.find(f => f.fieldId === fieldId);\n      if (field) {\n        setTemporaryDisplayFields(prev => new Set([...prev, fieldId]));\n        setShowSelectField(false);\n        setShowSelectButtons(new Set());\n        showSuccess(getAnnouncement('fieldTempDisplayAdded'));\n      }\n    },\n    [fields, showSuccess]\n  );\n\n  // 非表示項目を永続的に表示状態に変更する関数\n  const handleShowExistingFieldPermanently = useCallback(\n    async (fieldId: string) => {\n      const field = fields.find(f => f.fieldId === fieldId);\n      if (!field) return;\n\n      // 楽観的更新: 即座にReact状態を更新\n      const updatedField = { ...field, defaultDisplay: true };\n\n      // メインのfields配列を即座に更新\n      const updatedFields = fields.map(f =>\n        f.fieldId === fieldId ? updatedField : f\n      );\n\n      // 楽観的更新を適用\n      useRecordsStore.setState({ fields: updatedFields });\n\n      try {\n        await updateField(updatedField);\n\n        setTemporaryDisplayFields(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(fieldId);\n          return newSet;\n        });\n\n        setShowSelectButtons(new Set());\n\n        // 選択画面を閉じてメイン画面に戻る\n        setShowSelectField(false);\n\n        await loadFields();\n\n        showSuccess(getAnnouncement('fieldDisplayChanged'));\n      } catch (error) {\n        // エラー時のロールバック: 元の状態に戻す\n        useRecordsStore.setState({ fields });\n\n        const errorMessage =\n          error instanceof Error\n            ? error.message\n            : '表示状態の変更に失敗しました';\n        showError(errorMessage);\n        console.error('表示状態変更エラー:', error);\n      }\n    },\n    [fields, updateField, handleAsyncError, loadFields, showSuccess]\n  );\n\n  // 既存項目の編集機能\n  const handleEditExistingField = useCallback((field: Field) => {\n    setEditingExistingFieldId(field.fieldId);\n    setEditingExistingField({\n      name: field.name,\n      unit: field.unit,\n    });\n    setShowSelectButtons(new Set());\n  }, []);\n\n  const handleEditExistingFieldSave = useCallback(async () => {\n    if (!editingExistingFieldId || !editingExistingField.name?.trim()) {\n      setEditingExistingFieldId(null);\n      setEditingExistingField({});\n      setShowSelectButtons(new Set());\n      return;\n    }\n\n    const original = fields.find(f => f.fieldId === editingExistingFieldId);\n    if (!original) return;\n\n    const result = await handleAsyncError(\n      async () => {\n        await updateField({\n          ...original,\n          name: editingExistingField.name!.trim(),\n          unit: editingExistingField.unit?.trim() || undefined,\n          order: original.order,\n          defaultDisplay: original.defaultDisplay,\n        });\n        await loadFields();\n        return true;\n      },\n      {\n        context: t('actions.edit'),\n        fallbackMessage: t('errors.general'),\n      }\n    );\n\n    if (result) {\n      showSuccess(getAnnouncement('fieldEditedSuccess'));\n    }\n\n    setEditingExistingFieldId(null);\n    setEditingExistingField({});\n    setShowSelectButtons(new Set());\n  }, [\n    editingExistingFieldId,\n    editingExistingField,\n    fields,\n    updateField,\n    handleAsyncError,\n    loadFields,\n    showSuccess,\n  ]);\n\n  // 既存項目の削除機能\n  const handleDeleteExistingField = useCallback(\n    async (field: Field) => {\n      const isConfirmed = window.confirm(\n        t('common.confirmDeleteField', { fieldName: field.name })\n      );\n\n      if (!isConfirmed) return;\n\n      const result = await handleAsyncError(\n        async () => {\n          await deleteField(field.fieldId);\n          await loadFields();\n          setShowSelectButtons(new Set());\n          return true;\n        },\n        {\n          context: t('actions.delete'),\n          fallbackMessage: t('errors.general'),\n        }\n      );\n\n      if (result) {\n        showSuccess(getAnnouncement('fieldDeletedSuccess'));\n      }\n    },\n    [deleteField, handleAsyncError, loadFields, showSuccess]\n  );\n\n  // ボタン表示制御\n  const toggleButtons = useCallback((fieldId: string) => {\n    setShowButtons(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(fieldId)) {\n        newSet.delete(fieldId);\n      } else {\n        newSet.add(fieldId);\n      }\n      return newSet;\n    });\n  }, []);\n\n  const areButtonsShown = useCallback(\n    (fieldId: string) => {\n      return showButtons.has(fieldId);\n    },\n    [showButtons]\n  );\n\n  // ボタン表示をクリアする関数を追加\n  const clearButtons = useCallback(() => {\n    setShowButtons(new Set());\n  }, []);\n\n  const toggleSelectButtons = useCallback((fieldId: string) => {\n    setShowSelectButtons(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(fieldId)) {\n        newSet.delete(fieldId);\n      } else {\n        newSet.add(fieldId);\n      }\n      return newSet;\n    });\n  }, []);\n\n  const areSelectButtonsShown = useCallback(\n    (fieldId: string) => {\n      return showSelectButtons.has(fieldId);\n    },\n    [showSelectButtons]\n  );\n\n  // 選択ボタン表示をクリアする関数を追加\n  const clearSelectButtons = useCallback(() => {\n    setShowSelectButtons(new Set());\n  }, []);\n\n  // 並び替えモーダル関連\n  const handleOpenSortModal = useCallback(async () => {\n    // フィールドが読み込まれていない場合は再読み込み\n    let currentFields = fields;\n    if (currentFields.length === 0) {\n      try {\n        await loadFields();\n        // ストアから最新のフィールドデータを取得\n        const { fields: latestFields } = useRecordsStore.getState();\n        currentFields = latestFields;\n\n        // 再読み込み後もフィールドがない場合は警告\n        if (currentFields.length === 0) {\n          showError(t('errors.fieldDataNotFound'));\n          return;\n        }\n      } catch (error) {\n        showError(t('errors.fieldDataLoadFailed'));\n        return;\n      }\n    }\n\n    const sortedFields = [...currentFields].sort(\n      (a, b) => (a.order || 999) - (b.order || 999)\n    );\n    setSortableFields(sortedFields);\n    sortableFieldsRef.current = sortedFields;\n    setShowSortModal(true);\n  }, [fields, loadFields, showError]);\n\n  const handleDragEnd = useCallback(\n    (event: DragEndEvent) => {\n      const { active, over } = event;\n\n      if (over && active.id !== over.id) {\n        const oldIndex = sortableFields.findIndex(\n          item => item.fieldId === active.id\n        );\n        const newIndex = sortableFields.findIndex(\n          item => item.fieldId === over.id\n        );\n        const newItems = arrayMove(sortableFields, oldIndex, newIndex);\n\n        setSortableFields(newItems);\n        sortableFieldsRef.current = newItems;\n      }\n    },\n    [sortableFields]\n  );\n\n  const handleSaveSortOrder = useCallback(async () => {\n    const result = await handleAsyncError(\n      async () => {\n        const currentFields = sortableFieldsRef.current;\n        const updatePromises = currentFields.map((field, index) => {\n          const updatedField = {\n            ...field,\n            order: index + 1,\n          };\n          return updateField(updatedField);\n        });\n\n        await Promise.all(updatePromises);\n        await new Promise(resolve => setTimeout(resolve, 50));\n        await loadFields();\n        setShowSortModal(false);\n        return true;\n      },\n      {\n        context: t('actions.sort'),\n        fallbackMessage: t('errors.general'),\n      }\n    );\n\n    if (result) {\n      showSuccess(getAnnouncement('sortOrderSaved'));\n    }\n  }, [updateField, handleAsyncError, loadFields, showSuccess]);\n\n  const handleHideField = useCallback(\n    async (field: Field) => {\n      const result = await handleAsyncError(\n        async () => {\n          await updateField({\n            ...field,\n            defaultDisplay: false,\n          });\n\n          setTemporaryDisplayFields(prev => {\n            const newSet = new Set(prev);\n            newSet.delete(field.fieldId);\n            return newSet;\n          });\n\n          setShowButtons(new Set());\n          await loadFields();\n          return true;\n        },\n        {\n          context: '項目非表示',\n          fallbackMessage: '項目の非表示に失敗しました',\n        }\n      );\n\n      if (result) {\n        showSuccess(getAnnouncement('fieldHidden'));\n      }\n    },\n    [updateField, handleAsyncError, loadFields, showSuccess]\n  );\n\n  const handleToggleDisplayInModal = useCallback(\n    async (fieldId: string) => {\n      const currentField = sortableFields.find(f => f.fieldId === fieldId);\n      if (!currentField) return;\n\n      const updatedField = {\n        ...currentField,\n        defaultDisplay: !currentField.defaultDisplay,\n      };\n\n      await handleAsyncError(\n        async () => {\n          await updateField(updatedField);\n\n          const updatedSortableFields = sortableFields.map(f =>\n            f.fieldId === fieldId ? updatedField : f\n          );\n          setSortableFields(updatedSortableFields);\n          sortableFieldsRef.current = updatedSortableFields;\n\n          const updatedMainFields = fields.map(f =>\n            f.fieldId === fieldId ? updatedField : f\n          );\n          useRecordsStore.setState({ fields: updatedMainFields });\n\n          if (updatedField.defaultDisplay) {\n            setTemporaryDisplayFields(prev => {\n              const newSet = new Set(prev);\n              newSet.delete(fieldId);\n              return newSet;\n            });\n          } else {\n            const isCurrentlyShown = fields.some(\n              f =>\n                f.fieldId === fieldId &&\n                (f.defaultDisplay || temporaryDisplayFields.has(fieldId))\n            );\n            if (isCurrentlyShown) {\n              setTemporaryDisplayFields(prev => new Set([...prev, fieldId]));\n            }\n          }\n\n          return true;\n        },\n        {\n          context: 'モーダル内表示状態変更',\n          fallbackMessage: '表示状態の変更に失敗しました',\n        }\n      );\n    },\n    [\n      sortableFields,\n      fields,\n      temporaryDisplayFields,\n      updateField,\n      handleAsyncError,\n    ]\n  );\n\n  return {\n    // 状態\n    showSelectField,\n    setShowSelectField,\n    showAddField,\n    setShowAddField,\n    newField,\n    setNewField,\n    editFieldId,\n    setEditFieldId,\n    editField,\n    setEditField,\n    addFieldError,\n    editingExistingFieldId,\n    setEditingExistingFieldId,\n    editingExistingField,\n    setEditingExistingField,\n    temporaryDisplayFields,\n    showSortModal,\n    setShowSortModal,\n    sortableFields,\n\n    // 関数\n    getHiddenFields,\n    handleAddField,\n    handleEditField,\n    handleEditFieldSave,\n    handleShowExistingField,\n    handleShowExistingFieldPermanently,\n    handleEditExistingField,\n    handleEditExistingFieldSave,\n    handleDeleteExistingField,\n    toggleButtons,\n    areButtonsShown,\n    toggleSelectButtons,\n    areSelectButtonsShown,\n    handleOpenSortModal,\n    handleDragEnd,\n    handleSaveSortOrder,\n    handleHideField,\n    handleToggleDisplayInModal,\n    clearButtons,\n    clearSelectButtons,\n  };\n}\n"],"names":["DateTimeSelector","memo","recordDate","recordTime","onDateChange","onTimeChange","onSetCurrentDateTime","t","useI18n","className","children","jsxs","jsx","HiCalendarDays","htmlFor","id","type","value","onChange","e","target","required","onClick","HiClock","displayName","NotesInput","maxLength","placeholder","handleChange","useCallback","charCount","length","remaining","isNearLimit","effectivePlaceholder","HiDocumentText","count","max","SortableItem","field","onToggleDisplay","attributes","listeners","setNodeRef","transform","transition","isDragging","useSortable","fieldId","announcePolite","useLiveRegion","style","CSS","Transform","toString","opacity","handleToggleDisplay","stopPropagation","preventDefault","newState","defaultDisplay","name","state","handleKeyboardToggle","keyboardHandlers","onEnter","onSpace","handleKeyDown","useKeyboardNavigation","displayStateDescription","ref","role","gridTemplateColumns","unit","onKeyDown","tabIndex","HiArrowsUpDown","SortModal","isOpen","onClose","fields","onDragEnd","onSave","modalProps","useModalAccessibility","onEscape","sensors","useSensors","useSensor","PointerSensor","KeyboardSensor","coordinateGetter","sortableKeyboardCoordinates","handleDragEnd","event","active","over","activeField","find","f","overField","handleSave","useEffect","document","body","overflow","paddingRight","createPortal","backgroundColor","HiBars3","DndContext","collisionDetection","closestCenter","accessibility","announcements","onDragStart","onDragOver","onDragCancel","SortableContext","items","map","strategy","verticalListSortingStrategy","HiXMark","HiCheckCircle","DbErrorType","useErrorHandler","showError","showWarning","useToastStore","handleError","error","options","showToast","logToConsole","context","fallbackMessage","appError","errorObj","Object","values","includes","dbError","message","originalError","dbErrorType","retryable","Error","toLowerCase","classifyError","logMessage","console","_a","logError","displayMessage","isRetryable","getDisplayMessage","handleAsyncError","async","asyncFn","handleBatchErrors","errors","formatLocalDate","date","getFullYear","String","getMonth","padStart","getDate","formatLocalTime","getHours","getMinutes","formatLocalDateTime","getSeconds","RecordInput","translateFieldName","translateError","getAriaLabel","getAnnouncement","useFormAccessibility","loadFields","addRecord","loadRecords","records","fieldsOperation","useRecordsStore","showSuccess","fieldManagement","addField","updateField","deleteField","showSelectField","setShowSelectField","useState","showAddField","setShowAddField","newField","setNewField","editFieldId","setEditFieldId","editField","setEditField","addFieldError","setAddFieldError","editingExistingFieldId","setEditingExistingFieldId","editingExistingField","setEditingExistingField","temporaryDisplayFields","setTemporaryDisplayFields","Set","showButtons","setShowButtons","showSelectButtons","setShowSelectButtons","showSortModal","setShowSortModal","sortableFields","setSortableFields","sortableFieldsRef","useRef","getNextDefaultOrder","Math","order","getHiddenFields","filter","sort","a","b","handleAddField","trim","some","replace","prev","handleEditField","handleEditFieldSave","original","handleShowExistingField","handleShowExistingFieldPermanently","updatedField","updatedFields","setState","newSet","delete","errorMessage","handleEditExistingField","handleEditExistingFieldSave","handleDeleteExistingField","window","confirm","fieldName","toggleButtons","has","add","areButtonsShown","clearButtons","toggleSelectButtons","areSelectButtonsShown","clearSelectButtons","handleOpenSortModal","currentFields","latestFields","getState","sortedFields","current","oldIndex","findIndex","item","newIndex","newItems","arrayMove","handleSaveSortOrder","updatePromises","index","Promise","all","resolve","setTimeout","handleHideField","handleToggleDisplayInModal","currentField","updatedSortableFields","updatedMainFields","useFieldManagement","setValues","formError","setFormError","setRecordDate","Date","setRecordTime","recordNotes","setRecordNotes","_showSortModal","_setShowSortModal","performanceMonitor","trackRender","start","end","trackDatabaseOperation","loadData","interactionId","trackInteraction","hasValue","isNaN","handleSetLastValue","lastValue","lastRecord","record","datetime","getTime","getLastValue","onSubmit","validateDateString","validateTimeString","val","validationResult","validateFieldValue","min","isValid","join","validate","recordedCount","recordsToAdd","selectedDateTime","push","now","random","substr","time","Button","variant","size","icon","newValues","title","Number","HiClipboardDocumentList","HiPencil","HiEyeSlash","fullWidth","Fragment","HiPlus","HiTrash","example","HiArrowLeft","disabled","loading"],"mappings":"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"}