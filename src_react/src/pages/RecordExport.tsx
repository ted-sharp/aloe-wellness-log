import React, { useEffect, useState } from 'react';
import {
  HiArrowDownTray,
  HiCalendarDays,
  HiChartBarSquare,
  HiDocument,
  HiExclamationTriangle,
  HiSparkles,
  HiTrash,
} from 'react-icons/hi2';
import Button from '../components/Button';
import ProgressBar from '../components/ProgressBar';
import {
  ErrorMessage,
  InfoMessage,
  SuccessMessage,
} from '../components/StatusMessage';
import { useRecordsStore } from '../store/records';
import type { RecordItem } from '../types/record';
import { isDev } from '../utils/devTools';
import { performanceMonitor } from '../utils/performanceMonitor';

function formatDateForFilename(date: Date) {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  const seconds = String(date.getSeconds()).padStart(2, '0');
  return `${year}${month}${day}${hours}${minutes}${seconds}`;
}

function toCSV(
  records: RecordItem[],
  fields: { fieldId: string; name: string }[],
  t: (key: string) => string
) {
  const header = [
    'id',
    'date',
    'time',
    'datetime',
    'fieldId',
    'fieldName',
    'value',
  ];
  const rows = records.map(rec => {
    const field = fields.find(f => f.fieldId === rec.fieldId);
    return [
      rec.id,
      rec.date,
      rec.time,
      rec.datetime,
      rec.fieldId,
      field ? field.name : '',
      typeof rec.value === 'boolean'
        ? rec.value
          ? t('fields.yes')
          : t('fields.no')
        : rec.value,
    ];
  });
  return [header, ...rows]
    .map(row =>
      row
        .map(String)
        .map(s => `"${s.replace(/"/g, '""')}"`)
        .join(',')
    )
    .join('\r\n');
}

export default function RecordExport({
  showTipsModal,
}: {
  showTipsModal?: () => void;
}) {
  const {
    records,
    fields,
    loadRecords,
    loadFields,
    deleteAllData,
    initializeFields,
    addRecord,
  } = useRecordsStore();
  const [importStatus, setImportStatus] = useState<string | null>(null);
  const [testDataStatus, setTestDataStatus] = useState<string | null>(null);
  const [testDataProgress, setTestDataProgress] = useState<number>(0);
  const [isGeneratingTestData, setIsGeneratingTestData] =
    useState<boolean>(false);

  // „Ç®„É©„Éº„ÉÜ„Çπ„ÉàÁî®„ÅÆÁä∂ÊÖã
  const [errorToThrow, setErrorToThrow] = useState<Error | null>(null);

  // TIPSËá™ÂãïË°®Á§∫ÁÑ°ÂäπÂåñË®≠ÂÆö
  const [disableTips, setDisableTips] = useState(() => {
    return localStorage.getItem('disableTips') === '1';
  });
  useEffect(() => {
    localStorage.setItem('disableTips', disableTips ? '1' : '0');
  }, [disableTips]);

  // „Ç®„É©„Éº„ÉÜ„Çπ„ÉàÁî®: „É¨„É≥„ÉÄ„É™„É≥„Ç∞ÊôÇ„Å´„Ç®„É©„Éº„ÇíÊäï„Åí„Çã
  if (errorToThrow) {
    throw errorToThrow;
  }

  // „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁõ£Ë¶ñ„ÅÆÂàùÊúüÂåñ
  useEffect(() => {
    performanceMonitor.trackRender.start('RecordExport');
    return () => {
      performanceMonitor.trackRender.end('RecordExport');
    };
  });

  // ÈñãÁô∫Áí∞Â¢É„Åß„ÅÆ„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊÉÖÂ†±Ë°®Á§∫
  useEffect(() => {
    if (!isDev) return;

    const logPerformanceInfo = () => {
      console.group('üîç RecordExport Performance Info');
      console.log(`üìä Total Records: ${records.length}`);
      console.log(`üìä Total Fields: ${fields.length}`);
      console.log(`üìä Import Status: ${importStatus || 'none'}`);
      console.log(`üìä Test Data Status: ${testDataStatus || 'none'}`);
      console.log(`üìä Test Data Progress: ${testDataProgress}%`);
      console.log(`üìä Is Generating: ${isGeneratingTestData}`);
      console.groupEnd();
    };

    const timeout = setTimeout(logPerformanceInfo, 2000);
    return () => clearTimeout(timeout);
  }, [
    records.length,
    fields.length,
    importStatus,
    testDataStatus,
    testDataProgress,
    isGeneratingTestData,
  ]);

  // Êó•‰ªò„ÉªÊôÇÂàª„ÅßÈôçÈ†Ü„ÇΩ„Éº„ÉàÔºàÊñ∞„Åó„ÅÑÈ†ÜÔºâÔºà„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁõ£Ë¶ñ‰ªò„ÅçÔºâ
  const sortedRecords = (() => {
    const startTime = performance.now();
    const result = [...records].sort((a, b) => {
      const aKey = `${a.date} ${a.time}`;
      const bKey = `${b.date} ${b.time}`;
      return bKey.localeCompare(aKey);
    });

    const duration = performance.now() - startTime;
    if (isDev && duration > 10) {
      console.warn(
        `üêå Slow record sorting: ${duration.toFixed(2)}ms for ${
          records.length
        } records`
      );
    }

    return result;
  })();

  const handleExportCSV = () => {
    const csv = toCSV(sortedRecords, fields, t => t);
    const blob = new Blob([csv], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `records-${formatDateForFilename(new Date())}.csv`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const handleExportJSON = () => {
    const json = JSON.stringify(sortedRecords, null, 2);
    const blob = new Blob([json], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `records-${formatDateForFilename(new Date())}.json`;
    a.click();
    URL.revokeObjectURL(url);
  };

  // CSV„Éë„Éº„ÇπÈñ¢Êï∞
  const parseCSV = (csvText: string): RecordItem[] => {
    // ÊîπË°åÊñáÂ≠ó„ÇíÁµ±‰∏ÄÔºà\r\n „ÇÑ \r „Çí \n „Å´Áµ±‰∏ÄÔºâ
    const normalizedText = csvText.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
    const lines = normalizedText.trim().split('\n');

    if (lines.length < 2)
      throw new Error('CSV„Éï„Ç°„Ç§„É´„ÅåÁ©∫„Åæ„Åü„ÅØÂΩ¢Âºè„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì');

    // CSV„ÅÆË°å„Çí„Éë„Éº„Çπ„Åô„ÇãÈñ¢Êï∞Ôºà„Ç´„É≥„ÉûÂå∫Âàá„Çä„Å†„Åå„ÉÄ„Éñ„É´„ÇØ„Ç©„Éº„ÉàÂÜÖ„ÅÆ„Ç´„É≥„Éû„ÅØÁÑ°Ë¶ñÔºâ
    const parseCSVLine = (line: string): string[] => {
      const result: string[] = [];
      let current = '';
      let inQuotes = false;
      let i = 0;

      while (i < line.length) {
        const char = line[i];

        if (char === '"') {
          if (inQuotes && line[i + 1] === '"') {
            // „Ç®„Çπ„Ç±„Éº„Éó„Åï„Çå„Åü„ÉÄ„Éñ„É´„ÇØ„Ç©„Éº„Éà
            current += '"';
            i += 2;
          } else {
            // „ÇØ„Ç©„Éº„Éà„ÅÆÈñãÂßã„Åæ„Åü„ÅØÁµÇ‰∫Ü
            inQuotes = !inQuotes;
            i++;
          }
        } else if (char === ',' && !inQuotes) {
          // „Ç´„É≥„ÉûÂå∫Âàá„ÇäÔºà„ÇØ„Ç©„Éº„ÉàÂ§ñÔºâ
          result.push(current);
          current = '';
          i++;
        } else {
          current += char;
          i++;
        }
      }

      result.push(current);
      return result;
    };

    const header = parseCSVLine(lines[0]);

    const expectedHeader = [
      'id',
      'date',
      'time',
      'datetime',
      'fieldId',
      'fieldName',
      'value',
    ];

    if (!expectedHeader.every(col => header.includes(col))) {
      console.error('Expected headers:', expectedHeader);
      console.error('Actual headers:', header);
      throw new Error(
        `CSV file format is incorrect. Required columns: ${expectedHeader.join(
          ', '
        )}`
      );
    }

    const records: RecordItem[] = [];
    for (let i = 1; i < lines.length; i++) {
      try {
        // Á©∫Ë°å„Çí„Çπ„Ç≠„ÉÉ„Éó
        if (!lines[i].trim()) continue;

        const values = parseCSVLine(lines[i]);

        // ÂàóÊï∞„ÉÅ„Çß„ÉÉ„ÇØ
        if (values.length !== header.length) {
          console.warn(
            `Row ${i}: ÂàóÊï∞„Åå‰∏ÄËá¥„Åó„Åæ„Åõ„Çì (expected: ${header.length}, actual: ${values.length})`
          );
          continue;
        }

        const record: RecordItem = {
          id: values[header.indexOf('id')],
          date: values[header.indexOf('date')],
          time: values[header.indexOf('time')],
          datetime: values[header.indexOf('datetime')],
          fieldId: values[header.indexOf('fieldId')],
          value: values[header.indexOf('value')],
        };

        // ÂøÖÈ†à„Éï„Ç£„Éº„É´„Éâ„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
        if (!record.id || !record.date || !record.time || !record.fieldId) {
          console.warn(`Row ${i}: ÂøÖÈ†àÈ†ÖÁõÆ„Åå‰∏çË∂≥`, record);
          continue;
        }

        // booleanÂÄ§„ÅÆÂ§âÊèõ
        if (record.value === 'yes' || record.value === '„ÅÇ„Çä') {
          record.value = true;
        } else if (record.value === 'no' || record.value === '„Å™„Åó') {
          record.value = false;
        } else if (!isNaN(Number(record.value)) && record.value !== '') {
          record.value = Number(record.value);
        }

        records.push(record);
      } catch (error) {
        console.error(`Row ${i} parsing error:`, error);
        throw new Error(
          `${i}Ë°åÁõÆ„ÅÆÂá¶ÁêÜ„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${
            error instanceof Error ? error.message : '‰∏çÊòé„Å™„Ç®„É©„Éº'
          }`
        );
      }
    }

    return records;
  };

  // „Ç§„É≥„Éù„Éº„ÉàÂá¶ÁêÜ
  const handleImport = async (file: File, format: 'csv' | 'json') => {
    setImportStatus('„Éá„Éº„Çø„Çí„Ç§„É≥„Éù„Éº„Éà‰∏≠...');

    try {
      const text = await file.text();
      let records: RecordItem[];

      if (format === 'json') {
        records = JSON.parse(text);
        if (!Array.isArray(records)) {
          throw new Error('JSON file format is incorrect');
        }
      } else {
        records = parseCSV(text);
      }

      // „Éá„Éº„ÇøÊ§úË®º
      for (const record of records) {
        if (!record.id || !record.date || !record.time || !record.fieldId) {
          throw new Error('Data is missing required fields');
        }
      }

      // „Ç§„É≥„Éù„Éº„ÉàÂÆüË°å
      let importCount = 0;
      for (const record of records) {
        try {
          await addRecord(record);
          importCount++;
        } catch (error) {
          console.warn('Skipping record addition:', record.id, error);
        }
      }

      await loadRecords();
      setImportStatus(`‚úÖ ${importCount}„Éá„Éº„Çø„Çí„Ç§„É≥„Éù„Éº„Éà„Åó„Åæ„Åó„Åü`);
      setTimeout(() => setImportStatus(null), 3000);
    } catch (error) {
      const errorInstance =
        error instanceof Error ? error : new Error('Unknown error');
      console.error('Import error:', errorInstance);

      setImportStatus(
        `‚ùå „Éá„Éº„Çø„ÅÆ„Ç§„É≥„Éù„Éº„Éà„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${errorInstance.message}`
      );
      setTimeout(() => setImportStatus(null), 5000);
    }
  };

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      // Êã°ÂºµÂ≠ê„ÅßËá™ÂãïÂà§Âà•
      const fileName = file.name.toLowerCase();
      let format: 'csv' | 'json';

      if (fileName.endsWith('.csv')) {
        format = 'csv';
      } else if (fileName.endsWith('.json')) {
        format = 'json';
      } else {
        setImportStatus('„Çµ„Éù„Éº„Éà„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„Éï„Ç°„Ç§„É´ÂΩ¢Âºè„Åß„Åô');
        setTimeout(() => setImportStatus(null), 3000);
        event.target.value = '';
        return;
      }

      handleImport(file, format);
    }
    // inputË¶ÅÁ¥†„Çí„É™„Çª„ÉÉ„Éà
    event.target.value = '';
  };

  const handleDeleteAllData = async () => {
    const isConfirmed = window.confirm(
      '„Åô„Åπ„Å¶„ÅÆ„Éá„Éº„Çø„ÇíÂâäÈô§„Åó„Å¶„ÇÇ„Çà„Çç„Åó„ÅÑ„Åß„Åô„ÅãÔºü'
    );

    if (isConfirmed) {
      const doubleConfirm = window.confirm(
        'Êú¨ÂΩì„Å´ÂâäÈô§„Åó„Å¶„ÇÇ„Çà„Çç„Åó„ÅÑ„Åß„Åô„ÅãÔºü„Åì„ÅÆÊìç‰Ωú„ÅØÂÖÉ„Å´Êàª„Åõ„Åæ„Åõ„Çì„ÄÇ'
      );

      if (doubleConfirm) {
        try {
          await deleteAllData();
          // ÂàùÊúüÈ†ÖÁõÆ„ÇíÂÜçÂ∫¶‰ΩúÊàê
          await initializeFields();
          await loadFields();
          await loadRecords();
          alert('„Åô„Åπ„Å¶„ÅÆ„Éá„Éº„Çø„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü');
        } catch (error) {
          console.error('Delete error:', error);
          alert('„Éá„Éº„Çø„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
        }
      }
    }
  };

  // „ÉÜ„Çπ„Éà„Éá„Éº„ÇøÁîüÊàêÈñ¢Êï∞
  const generateTestData = async () => {
    setTestDataStatus('„ÉÜ„Çπ„Éà„Éá„Éº„Çø„ÇíÁîüÊàê‰∏≠...');
    setIsGeneratingTestData(true);
    setTestDataProgress(0);

    try {
      await loadFields(); // ÊúÄÊñ∞„ÅÆÈ†ÖÁõÆ„ÇíÂèñÂæó

      // defaultDisplay===false„ÅÆÈ†ÖÁõÆ„ÅØÈô§Â§ñ
      const visibleFields = fields.filter(f => f.defaultDisplay !== false);

      if (visibleFields.length === 0) {
        throw new Error(
          'Ë°®Á§∫ÂØæË±°„ÅÆ„Éï„Ç£„Éº„É´„Éâ„ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì„ÄÇÂàùÊúüÂåñ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'
        );
      }

      const dataCount = 100; // ÁîüÊàê„Åô„Çã„Éá„Éº„ÇøÊï∞
      const daysBack = 180; // ÈÅéÂéª6„ÅãÊúàÂàÜÔºàÁ¥Ñ180Êó•Ôºâ
      let createdCount = 0;

      for (let i = 0; i < dataCount; i++) {
        // „É©„É≥„ÉÄ„É†„Å™Êó•‰ªò„ÇíÁîüÊàêÔºàÈÅéÂéª30Êó•‰ª•ÂÜÖÔºâ
        const randomDaysAgo = Math.floor(Math.random() * daysBack);
        const date = new Date();
        date.setDate(date.getDate() - randomDaysAgo);
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const dateStr = `${year}-${month}-${day}`;

        // „É©„É≥„ÉÄ„É†„Å™ÊôÇÂàª„ÇíÁîüÊàê
        const hours = Math.floor(Math.random() * 24);
        const minutes = Math.floor(Math.random() * 60);
        const timeStr = `${hours.toString().padStart(2, '0')}:${minutes
          .toString()
          .padStart(2, '0')}`;
        const datetimeStr = `${dateStr} ${timeStr}`;

        // „É©„É≥„ÉÄ„É†„Å™È†ÖÁõÆ„ÇíÈÅ∏ÊäûÔºàvisibleFields„ÅÆ„ÅøÂØæË±°Ôºâ
        const randomField =
          visibleFields[Math.floor(Math.random() * visibleFields.length)];

        // È†ÖÁõÆ„ÅÆÂûã„Å´Âøú„Åò„Å¶„É©„É≥„ÉÄ„É†„Å™ÂÄ§„ÇíÁîüÊàê
        let value: string | number | boolean;

        if (randomField.type === 'boolean') {
          value = Math.random() > 0.5;
        } else if (randomField.type === 'number') {
          // È†ÖÁõÆ„Å´Âøú„Åò„Å¶ÈÅ©Âàá„Å™Êï∞ÂÄ§ÁØÑÂõ≤„ÇíË®≠ÂÆö
          if (randomField.fieldId === 'weight') {
            value = Math.round((50 + Math.random() * 50) * 10) / 10; // 50-100kg
          } else if (randomField.fieldId === 'systolic_bp') {
            value = Math.round(90 + Math.random() * 60); // 90-150mmHg
          } else if (randomField.fieldId === 'diastolic_bp') {
            value = Math.round(60 + Math.random() * 40); // 60-100mmHg
          } else if (randomField.fieldId === 'heart_rate') {
            value = Math.round(60 + Math.random() * 60); // 60-120bpm
          } else if (randomField.fieldId === 'body_temperature') {
            value = Math.round((35.5 + Math.random() * 2) * 10) / 10; // 35.5-37.5‚ÑÉ
          } else {
            value = Math.round(Math.random() * 100 * 10) / 10; // „Éá„Éï„Ç©„É´„Éà: 0-100
          }
        } else {
          // stringÂûã„ÅÆÂ†¥Âêà
          if (randomField.fieldId === 'notes') {
            const sampleNotes = [
              'Feeling good today',
              'A bit tired',
              'Refreshed after exercise',
              'Food was delicious',
              'Want to sleep early',
              'Great weather, feeling refreshed',
              'Busy day at work',
              'Nice weekend break',
              '',
            ];
            value = sampleNotes[Math.floor(Math.random() * sampleNotes.length)];
          } else {
            value = `Test value ${Math.floor(Math.random() * 1000)}`;
          }
        }

        // ‰∏ÄÊÑè„Å™ID„ÇíÁîüÊàê
        const uniqueId = `test_${Date.now()}_${Math.random()
          .toString(36)
          .substr(2, 9)}`;

        const testRecord = {
          id: uniqueId,
          date: dateStr,
          time: timeStr,
          datetime: datetimeStr,
          fieldId: randomField.fieldId,
          value: value,
        };

        try {
          await addRecord(testRecord);
          createdCount++;
        } catch (error) {
          console.warn('„ÉÜ„Çπ„Éà„É¨„Ç≥„Éº„Éâ„ÅÆËøΩÂä†„Çí„Çπ„Ç≠„ÉÉ„Éó:', testRecord.id, error);
        }

        // ÈÄ≤Êçó„ÇíÊõ¥Êñ∞
        const progress = ((i + 1) / dataCount) * 100;
        setTestDataProgress(progress);

        // ÈÄ≤Êçó„ÇíË°®Á§∫Ôºà10‰ª∂„Åî„Å®Ôºâ
        if ((i + 1) % 10 === 0) {
          setTestDataStatus(`„ÉÜ„Çπ„Éà„Éá„Éº„Çø„ÇíÁîüÊàê‰∏≠... ${i + 1}/${dataCount}`);
        }
      }

      await loadRecords();
      setTestDataStatus(`‚úÖ ${createdCount}„ÉÜ„Çπ„Éà„Éá„Éº„Çø„ÇíÁîüÊàê„Åó„Åæ„Åó„Åü`);
      setTimeout(() => {
        setTestDataStatus(null);
        setTestDataProgress(0);
      }, 3000);
    } catch (error) {
      console.error('Test data generation error:', error);
      setTestDataStatus(
        `‚ùå „ÉÜ„Çπ„Éà„Éá„Éº„Çø„ÅÆÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${
          error instanceof Error ? error.message : 'Unknown error'
        }`
      );
      setTimeout(() => {
        setTestDataStatus(null);
        setTestDataProgress(0);
      }, 5000);
    } finally {
      setIsGeneratingTestData(false);
    }
  };

  const handleGenerateTestData = () => {
    const isConfirmed = window.confirm(
      'Êú¨ÂΩì„Å´„ÉÜ„Çπ„Éà„Éá„Éº„Çø„ÇíÁîüÊàê„Åó„Å¶„ÇÇ„Çà„Çç„Åó„ÅÑ„Åß„Åô„ÅãÔºü'
    );

    if (isConfirmed) {
      generateTestData();
    }
  };

  // ‰ΩìÈáçÂ∞ÇÁî®„ÉÜ„Çπ„Éà„Éá„Éº„ÇøÁîüÊàêÈñ¢Êï∞
  const generateWeightTestData = async () => {
    setTestDataStatus('‰ΩìÈáç„ÉÜ„Çπ„Éà„Éá„Éº„Çø„ÇíÁîüÊàê‰∏≠...');
    setIsGeneratingTestData(true);
    setTestDataProgress(0);
    try {
      await loadFields();
      const weightField = fields.find(
        f => f.fieldId === 'weight' && f.defaultDisplay !== false
      );
      if (!weightField) {
        throw new Error('‰ΩìÈáç„Éï„Ç£„Éº„É´„Éâ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ');
      }
      const daysBack = 180; // 180Êó•ÂàÜ
      const baseWeight = 75; // ÂàùÊúü‰ΩìÈáç
      const minWeight = 50;
      const maxWeight = 100;
      let createdCount = 0;
      for (let i = daysBack - 1; i >= 0; i--) {
        // Êó•‰ªò„ÇíÈÅéÂéª„Åã„ÇâÈ†Ü„Å´ÁîüÊàê
        const date = new Date();
        date.setDate(date.getDate() - i);
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const dateStr = `${year}-${month}-${day}`;
        // ÊôÇÂàª„ÅØÊØéÊó•8:00Âõ∫ÂÆö
        const timeStr = '08:00';
        const datetimeStr = `${dateStr} ${timeStr}`;
        // ‰ΩìÈáç„ÇíÂæê„ÄÖ„Å´Ê∏õÂ∞ë„Åï„Åõ„Å§„Å§¬±2kg„ÅÆÁØÑÂõ≤„Åß„É©„É≥„ÉÄ„É†Â§âÂãï
        const trend = (daysBack - i) * 0.05; // 1Êó•„ÅÇ„Åü„Çä0.05kgÊ∏õÂ∞ë
        const randomDelta = (Math.random() - 0.5) * 2; // -2„Äú+2kgÔºà1Êó•„ÅÇ„Åü„Çä„ÅÆÂ§âÂåñÂπÖ„Çí¬±2„Å´Âà∂ÈôêÔºâ
        let weight = baseWeight - trend + randomDelta;
        weight = Math.max(
          minWeight,
          Math.min(maxWeight, Math.round(weight * 10) / 10)
        );
        // ‰∏ÄÊÑè„Å™ID„ÇíÁîüÊàê
        const uniqueId = `test_weight_${dateStr}_${Math.random()
          .toString(36)
          .substr(2, 6)}`;
        const testRecord = {
          id: uniqueId,
          date: dateStr,
          time: timeStr,
          datetime: datetimeStr,
          fieldId: weightField.fieldId,
          value: weight,
        };
        try {
          await addRecord(testRecord);
          createdCount++;
        } catch (error) {
          console.warn(
            '‰ΩìÈáç„ÉÜ„Çπ„Éà„É¨„Ç≥„Éº„Éâ„ÅÆËøΩÂä†„Çí„Çπ„Ç≠„ÉÉ„Éó:',
            testRecord.id,
            error
          );
        }
        // ÈÄ≤Êçó„ÇíÊõ¥Êñ∞
        const progress = ((daysBack - i + 1) / daysBack) * 100;
        setTestDataProgress(progress);
        if ((daysBack - i + 1) % 10 === 0) {
          setTestDataStatus(
            `‰ΩìÈáç„ÉÜ„Çπ„Éà„Éá„Éº„Çø„ÇíÁîüÊàê‰∏≠... ${daysBack - i + 1}/${daysBack}`
          );
        }
      }
      await loadRecords();
      setTestDataStatus(`‚úÖ ‰ΩìÈáç„ÉÜ„Çπ„Éà„Éá„Éº„Çø${createdCount}‰ª∂„ÇíÁîüÊàê„Åó„Åæ„Åó„Åü`);
      setTimeout(() => {
        setTestDataStatus(null);
        setTestDataProgress(0);
      }, 3000);
    } catch (error) {
      console.error('‰ΩìÈáç„ÉÜ„Çπ„Éà„Éá„Éº„ÇøÁîüÊàê„Ç®„É©„Éº:', error);
      setTestDataStatus(
        `‚ùå ‰ΩìÈáç„ÉÜ„Çπ„Éà„Éá„Éº„Çø„ÅÆÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${
          error instanceof Error ? error.message : 'Unknown error'
        }`
      );
      setTimeout(() => {
        setTestDataStatus(null);
        setTestDataProgress(0);
      }, 5000);
    } finally {
      setIsGeneratingTestData(false);
    }
  };

  const handleGenerateWeightTestData = () => {
    const isConfirmed = window.confirm(
      'Êú¨ÂΩì„Å´‰ΩìÈáç„ÉÜ„Çπ„Éà„Éá„Éº„Çø„ÇíÁîüÊàê„Åó„Å¶„ÇÇ„Çà„Çç„Åó„ÅÑ„Åß„Åô„ÅãÔºü'
    );
    if (isConfirmed) {
      generateWeightTestData();
    }
  };

  return (
    <div className="max-w-full sm:max-w-4xl mx-auto sm:px-0">
      <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-md p-6 mb-8">
        <h2 className="text-2xl font-semibold text-gray-800 dark:text-white mb-6">
          „Éá„Éº„Çø„ÅÆË©≥Á¥∞
        </h2>
        <div className="text-base text-gray-600 dark:text-gray-300 space-y-3">
          <p className="flex items-center gap-2">
            <HiChartBarSquare className="w-5 h-5 text-blue-600 dark:text-blue-400" />
            <strong className="text-gray-800 dark:text-white">
              Á∑è„É¨„Ç≥„Éº„ÉâÊï∞
            </strong>{' '}
            {sortedRecords.length}
          </p>
          <p className="flex items-center gap-2">
            <HiCalendarDays className="w-5 h-5 text-blue-600 dark:text-blue-400" />
            <strong className="text-gray-800 dark:text-white">ÊúüÈñì</strong>{' '}
            {sortedRecords.length > 0
              ? `${sortedRecords[sortedRecords.length - 1]?.date} „Äú ${
                  sortedRecords[0]?.date
                }`
              : '„Éá„Éº„Çø„Å™„Åó'}
          </p>
        </div>
      </div>

      <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-md p-6 mb-8">
        <h2 className="text-2xl font-semibold text-gray-800 dark:text-white mb-6">
          „Éá„Éº„Çø„ÅÆ„Ç®„ÇØ„Çπ„Éù„Éº„Éà
        </h2>
        <div className="text-sm text-gray-600 dark:text-gray-300 mb-6">
          „Éá„Éº„Çø„ÇíCSV„Åæ„Åü„ÅØJSONÂΩ¢Âºè„Åß„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Åó„Åæ„Åô„ÄÇ
        </div>
        <div className="flex flex-col gap-4 mb-6">
          <Button
            variant="purple"
            size="lg"
            icon={HiDocument}
            onClick={handleExportCSV}
            fullWidth={false}
          >
            CSVÂΩ¢Âºè„Åß„Ç®„ÇØ„Çπ„Éù„Éº„Éà
          </Button>
          <Button
            variant="purple"
            size="lg"
            icon={HiDocument}
            onClick={handleExportJSON}
            fullWidth={false}
          >
            JSONÂΩ¢Âºè„Åß„Ç®„ÇØ„Çπ„Éù„Éº„Éà
          </Button>
        </div>
      </div>

      <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-md p-6 mb-8">
        <h2 className="text-2xl font-semibold text-gray-800 dark:text-white mb-6">
          „Éá„Éº„Çø„ÅÆ„Ç§„É≥„Éù„Éº„Éà
        </h2>
        <div className="text-sm text-gray-600 dark:text-gray-300 mb-6">
          „Éá„Éº„Çø„ÇíCSV„Åæ„Åü„ÅØJSONÂΩ¢Âºè„Åß„Ç§„É≥„Éù„Éº„Éà„Åó„Åæ„Åô„ÄÇ
        </div>

        {importStatus && (
          <div className="mb-6">
            {importStatus.includes('‚úÖ') && (
              <SuccessMessage message={importStatus.replace('‚úÖ ', '')} />
            )}
            {importStatus.includes('‚ùå') && (
              <ErrorMessage message={importStatus.replace('‚ùå ', '')} />
            )}
            {!importStatus.includes('‚úÖ') && !importStatus.includes('‚ùå') && (
              <InfoMessage message={importStatus} />
            )}
          </div>
        )}

        <div className="flex flex-col gap-4 mb-6">
          <div>
            <input
              type="file"
              accept=".csv,.json"
              onChange={handleFileSelect}
              className="hidden"
              id="data-import"
            />
            <label
              htmlFor="data-import"
              className="bg-purple-600 text-white px-6 py-3 rounded-lg font-medium shadow-md hover:bg-purple-700 hover:shadow-lg transition-all duration-200 flex items-center justify-center gap-2 w-auto cursor-pointer"
            >
              <HiArrowDownTray className="w-5 h-5" />
              „Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû
            </label>
          </div>
        </div>
      </div>

      <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-md p-6 mb-8">
        <h2 className="text-2xl font-semibold text-gray-800 dark:text-white mb-4">
          TIPSËá™ÂãïË°®Á§∫Ë®≠ÂÆö
        </h2>
        <div className="flex items-center">
          <input
            id="disable-tips-checkbox"
            type="checkbox"
            className="mr-2 w-5 h-5 accent-purple-600"
            checked={disableTips}
            onChange={e => setDisableTips(e.target.checked)}
          />
          <label
            htmlFor="disable-tips-checkbox"
            className="text-base text-gray-800 dark:text-gray-200 select-none cursor-pointer"
          >
            TIPS„ÇíËá™ÂãïË°®Á§∫„Åó„Å™„ÅÑ
          </label>
        </div>
      </div>

      {/* „ÉÜ„Çπ„Éà„Éá„Éº„ÇøÁîüÊàê„Çª„ÇØ„Ç∑„Éß„É≥ÔºàÈñãÁô∫Áí∞Â¢É„ÅÆ„ÅøË°®Á§∫Ôºâ */}
      {isDev && (
        <div className="bg-purple-50 dark:bg-purple-900/20 border-2 border-dashed border-purple-400 dark:border-purple-500 rounded-2xl shadow-md p-6 mb-8">
          <h2 className="text-2xl font-semibold text-purple-800 dark:text-purple-400 mb-6">
            „ÉÜ„Çπ„Éà„Éá„Éº„ÇøÁîüÊàêÔºàÈñãÁô∫Áí∞Â¢ÉÂ∞ÇÁî®Ôºâ
          </h2>
          <div className="text-sm text-purple-700 dark:text-purple-300 mb-6">
            „ÉÜ„Çπ„Éà„Éá„Éº„Çø„ÇíÁîüÊàê„Åó„Å¶„Éá„Éº„Çø„Éô„Éº„Çπ„Å´ËøΩÂä†„Åó„Åæ„Åô„ÄÇ
          </div>

          {testDataStatus && (
            <div className="mb-6">
              {testDataStatus.includes('‚úÖ') && (
                <SuccessMessage message={testDataStatus.replace('‚úÖ ', '')} />
              )}
              {testDataStatus.includes('‚ùå') && (
                <ErrorMessage message={testDataStatus.replace('‚ùå ', '')} />
              )}
              {!testDataStatus.includes('‚úÖ') &&
                !testDataStatus.includes('‚ùå') && (
                  <InfoMessage message={testDataStatus} />
                )}
            </div>
          )}

          {isGeneratingTestData && (
            <div className="mb-6">
              <ProgressBar
                value={testDataProgress}
                label="„ÉÜ„Çπ„Éà„Éá„Éº„Çø„ÇíÁîüÊàê‰∏≠..."
                showPercentage={true}
                variant="primary"
                size="md"
              />
            </div>
          )}

          <div className="flex flex-col gap-4 mb-6">
            <Button
              variant="purple"
              size="lg"
              icon={HiSparkles}
              onClick={handleGenerateTestData}
              fullWidth={false}
              disabled={isGeneratingTestData}
              loading={isGeneratingTestData}
            >
              „ÉÜ„Çπ„Éà„Éá„Éº„ÇøÁîüÊàê
            </Button>
            <Button
              variant="purple"
              size="lg"
              icon={HiSparkles}
              onClick={handleGenerateWeightTestData}
              fullWidth={false}
              disabled={isGeneratingTestData}
              loading={isGeneratingTestData}
            >
              ‰ΩìÈáç„ÉÜ„Çπ„Éà„Éá„Éº„ÇøÁîüÊàê
            </Button>
            <Button
              variant="purple"
              size="lg"
              icon={HiSparkles}
              onClick={() => showTipsModal && showTipsModal()}
              fullWidth={false}
            >
              TIPS„ÇíË°®Á§∫
            </Button>
          </div>
        </div>
      )}

      {/* „Ç®„É©„Éº„ÉÜ„Çπ„ÉàUI„Çª„ÇØ„Ç∑„Éß„É≥ */}
      {isDev && (
        <div className="bg-orange-50 dark:bg-orange-900/20 border-2 border-dashed border-orange-200 dark:border-orange-700 rounded-2xl shadow-md p-6 mb-8">
          <h2 className="text-2xl font-semibold text-orange-800 dark:text-orange-400 mb-6 flex items-center gap-2">
            <HiExclamationTriangle className="w-6 h-6 text-orange-600 dark:text-orange-500" />
            „Ç®„É©„Éº„ÉÜ„Çπ„ÉàÔºàÈñãÁô∫Áí∞Â¢É„ÅÆ„ÅøÔºâ
          </h2>
          <div className="mb-6 text-left">
            <p className="text-base text-orange-700 dark:text-orange-300 mb-3">
              ‰∏ã„ÅÆ„Éú„Çø„É≥„ÇíÊäº„Åô„Å®„ÄÅÂº∑Âà∂ÁöÑ„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„ÄÅ„Ç¢„Éó„É™ÂÖ®‰Ωì„ÅÆ„Ç®„É©„Éº„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÅåË°®Á§∫„Åï„Çå„Åæ„Åô„ÄÇ
            </p>
            <p className="text-sm text-orange-600 dark:text-orange-400">
              ‚ÄªËá™Âãï„É™„Éà„É©„Ç§„ÇÑË©¶Ë°åÂõûÊï∞„ÅÆ„Éá„É¢„ÅØÂªÉÊ≠¢„Åï„Çå„Åæ„Åó„Åü„ÄÇ
            </p>
          </div>
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <Button
              variant="danger"
              size="md"
              onClick={() => {
                setErrorToThrow(
                  new Error(
                    '„ÉÜ„Çπ„ÉàÁî®„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Ç®„É©„Éº: „Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü'
                  )
                );
              }}
              fullWidth={false}
            >
              üí• „É¨„É≥„ÉÄ„É™„É≥„Ç∞„Ç®„É©„Éº
            </Button>
            <Button
              variant="danger"
              size="md"
              onClick={() => {
                setErrorToThrow(
                  new Error(
                    '„ÉÜ„Çπ„ÉàÁî®Âûã„Ç®„É©„Éº: undefined „Éó„É≠„Éë„ÉÜ„Ç£„Ç¢„ÇØ„Çª„Çπ„Ç®„É©„Éº'
                  )
                );
              }}
              fullWidth={false}
            >
              üö´ Âûã„Ç®„É©„Éº
            </Button>
            <Button
              variant="danger"
              size="md"
              onClick={() => {
                const asyncError = async () => {
                  await new Promise((_, reject) => {
                    setTimeout(
                      () =>
                        reject(
                          new Error(
                            '„ÉÜ„Çπ„ÉàÁî®ÈùûÂêåÊúü„Ç®„É©„Éº: Promise „ÅåÊãíÂê¶„Åï„Çå„Åæ„Åó„Åü'
                          )
                        ),
                      100
                    );
                  });
                };
                asyncError().catch(error => {
                  setErrorToThrow(error);
                });
              }}
              fullWidth={false}
            >
              ‚è∞ ÈùûÂêåÊúü„Ç®„É©„Éº
            </Button>
            <Button
              variant="danger"
              size="md"
              onClick={() => {
                try {
                  JSON.parse('{ invalid json syntax }');
                } catch (error) {
                  setErrorToThrow(
                    new Error(
                      `„ÉÜ„Çπ„ÉàÁî®JSON„Éë„Éº„Çπ„Ç®„É©„Éº: ${
                        error instanceof Error ? error.message : '‰∏çÊòé„Å™„Ç®„É©„Éº'
                      }`
                    )
                  );
                }
              }}
              fullWidth={false}
            >
              üìù JSON„Ç®„É©„Éº
            </Button>
            <Button
              variant="danger"
              size="md"
              onClick={() => {
                setErrorToThrow(
                  new Error(
                    '„ÉÜ„Çπ„ÉàÁî®„É°„É¢„É™„Ç®„É©„Éº: Â§ßÈáè„ÅÆ„Éá„Éº„ÇøÂá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü'
                  )
                );
              }}
              fullWidth={false}
            >
              üß† „É°„É¢„É™„Ç®„É©„Éº
            </Button>
            <Button
              variant="danger"
              size="md"
              onClick={() => {
                setErrorToThrow(
                  new Error(
                    '„ÉÜ„Çπ„ÉàÁî®„Çπ„Çø„ÉÉ„ÇØ„Ç™„Éº„Éê„Éº„Éï„É≠„Éº„Ç®„É©„Éº: ÁÑ°ÈôêÂÜçÂ∏∞Âëº„Å≥Âá∫„Åó„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü'
                  )
                );
              }}
              fullWidth={false}
            >
              ‚ôæÔ∏è „Çπ„Çø„ÉÉ„ÇØ„Ç™„Éº„Éê„Éº„Éï„É≠„Éº
            </Button>
          </div>
        </div>
      )}

      <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-700 rounded-2xl shadow-md p-6">
        <h2 className="text-2xl font-semibold text-red-800 dark:text-red-400 mb-6 flex items-center gap-2">
          <HiExclamationTriangle className="w-6 h-6 text-red-600 dark:text-red-500" />
          Âç±Èô∫„Çæ„Éº„É≥
        </h2>
        <div className="mb-6 text-left">
          <p className="text-base text-red-700 dark:text-red-300 mb-3">
            „Åô„Åπ„Å¶„ÅÆ„Éá„Éº„Çø„ÇíÂâäÈô§„Åó„Å¶„ÇÇ„Çà„Çç„Åó„ÅÑ„Åß„Åô„ÅãÔºü„Åì„ÅÆÊìç‰Ωú„ÅØÂÖÉ„Å´Êàª„Åõ„Åæ„Åõ„Çì„ÄÇ
          </p>
        </div>
        <Button
          variant="danger"
          size="lg"
          icon={HiTrash}
          onClick={handleDeleteAllData}
          fullWidth={false}
        >
          „Åô„Åπ„Å¶„ÅÆ„Éá„Éº„Çø„ÇíÂâäÈô§
        </Button>
      </div>
    </div>
  );
}
